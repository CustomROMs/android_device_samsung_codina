From c8a190ad529da8c48352d7899d7d7af15f9344cc Mon Sep 17 00:00:00 2001
From: LuK1337 <priv.luk@gmail.com>
Date: Tue, 5 Sep 2017 09:41:33 +0200
Subject: [PATCH 05/11] Camera: 1.0: Add support for non-treble camera blobs

* Camera HALs before Treble used to pass camera id
  in user field, in Treble they are meant to pass
  pointer to CameraDevice.
* This patch workarounds this by storing local pointer
  to CameraDevice and not relying on user field.
* Similar to demon000's CameraWrapper solution but
  it doesn't require wrapping the HAL which could
  theoretically break HAL3 compatibility.
---
 camera/device/1.0/default/Android.bp       |  3 +++
 camera/device/1.0/default/CameraDevice.cpp | 28 ++++++++++++++++++++++++++++
 2 files changed, 31 insertions(+)

diff --git a/camera/device/1.0/default/Android.bp b/camera/device/1.0/default/Android.bp
index 30c6c5f5..9fddde6b 100644
--- a/camera/device/1.0/default/Android.bp
+++ b/camera/device/1.0/default/Android.bp
@@ -31,6 +31,9 @@ cc_library_shared {
     ],
     product_variables: {
         lineage: {
+            uses_non_treble_camera: {
+                cflags: ["-DTARGET_USES_NON_TREBLE_CAMERA"],
+            },
             uses_qti_camera_device: {
                 cppflags: ["-DQTI_CAMERA_DEVICE"],
                 shared_libs: ["vendor.qti.hardware.camera.device@1.0_vendor"],
diff --git a/camera/device/1.0/default/CameraDevice.cpp b/camera/device/1.0/default/CameraDevice.cpp
index 116963b9..23ac0a2c 100644
--- a/camera/device/1.0/default/CameraDevice.cpp
+++ b/camera/device/1.0/default/CameraDevice.cpp
@@ -36,6 +36,10 @@ using ::android::hardware::graphics::common::V1_0::PixelFormat;
 
 HandleImporter CameraDevice::sHandleImporter;
 
+#ifdef TARGET_USES_NON_TREBLE_CAMERA
+CameraDevice* sCameraDevice;
+#endif
+
 Status CameraDevice::getHidlStatus(const int& status) {
     switch (status) {
         case 0: return Status::OK;
@@ -361,7 +365,12 @@ CameraDevice::CameraHeapMemory::~CameraHeapMemory() {
 // shared memory methods
 camera_memory_t* CameraDevice::sGetMemory(int fd, size_t buf_size, uint_t num_bufs, void *user) {
     ALOGV("%s", __FUNCTION__);
+#ifndef TARGET_USES_NON_TREBLE_CAMERA
     CameraDevice* object = static_cast<CameraDevice*>(user);
+#else
+    CameraDevice* object = sCameraDevice;
+    (void)(user);
+#endif
     if (object->mDeviceCallback == nullptr) {
         ALOGE("%s: camera HAL request memory while camera is not opened!", __FUNCTION__);
         return nullptr;
@@ -412,7 +421,12 @@ void CameraDevice::sPutMemory(camera_memory_t *data) {
 // Callback forwarding methods
 void CameraDevice::sNotifyCb(int32_t msg_type, int32_t ext1, int32_t ext2, void *user) {
     ALOGV("%s", __FUNCTION__);
+#ifndef TARGET_USES_NON_TREBLE_CAMERA
     CameraDevice* object = static_cast<CameraDevice*>(user);
+#else
+    CameraDevice* object = sCameraDevice;
+    (void)(user);
+#endif
     if (object->mDeviceCallback != nullptr) {
         object->mDeviceCallback->notifyCallback((NotifyCallbackMsg) msg_type, ext1, ext2);
     }
@@ -421,7 +435,12 @@ void CameraDevice::sNotifyCb(int32_t msg_type, int32_t ext1, int32_t ext2, void
 void CameraDevice::sDataCb(int32_t msg_type, const camera_memory_t *data, unsigned int index,
         camera_frame_metadata_t *metadata, void *user) {
     ALOGV("%s", __FUNCTION__);
+#ifndef TARGET_USES_NON_TREBLE_CAMERA
     CameraDevice* object = static_cast<CameraDevice*>(user);
+#else
+    CameraDevice* object = sCameraDevice;
+    (void)(user);
+#endif
     sp<CameraHeapMemory> mem(static_cast<CameraHeapMemory*>(data->handle));
     if (index >= mem->mNumBufs) {
         ALOGE("%s: invalid buffer index %d, max allowed is %d", __FUNCTION__,
@@ -533,7 +552,12 @@ void CameraDevice::handleCallbackTimestamp(
 void CameraDevice::sDataCbTimestamp(nsecs_t timestamp, int32_t msg_type,
         const camera_memory_t *data, unsigned index, void *user) {
     ALOGV("%s", __FUNCTION__);
+#ifndef TARGET_USES_NON_TREBLE_CAMERA
     CameraDevice* object = static_cast<CameraDevice*>(user);
+#else
+    CameraDevice* object = sCameraDevice;
+    (void)(user);
+#endif
     // Start refcounting the heap object from here on.  When the clients
     // drop all references, it will be destroyed (as well as the enclosed
     // MemoryHeapBase.
@@ -709,6 +733,10 @@ Return<Status> CameraDevice::open(const sp<ICameraDeviceCallback>& callback) {
 
     initHalPreviewWindow();
     mDeviceCallback = callback;
+#ifdef TARGET_USES_NON_TREBLE_CAMERA
+    sCameraDevice = this;
+#endif
+
 #ifdef QTI_CAMERA_DEVICE
     mQDeviceCallback = vendor::qti::hardware::camera::device::V1_0::IQCameraDeviceCallback::castFrom(callback);
     if(mQDeviceCallback == nullptr) {
-- 
2.11.0

