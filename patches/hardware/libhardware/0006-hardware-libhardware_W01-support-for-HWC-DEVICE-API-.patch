From 83c70efe03dc5fdd74073b932d83980582b647c5 Mon Sep 17 00:00:00 2001
From: Shilin Victor <radicaldreamer00001@gmail.com>
Date: Fri, 29 Mar 2019 22:54:27 +0300
Subject: [PATCH 6/7] 
 hardware-libhardware_W01-support-for-HWC-DEVICE-API-VERSION-1.patch

Change-Id: I3ea5045c0f830564992510af3db146c20707b2cf
---
 include/hardware/hwcomposer.h      | 49 +++++++++++++++---------------
 include/hardware/hwcomposer_defs.h | 61 +++++++++++++++++++++++++-------------
 2 files changed, 66 insertions(+), 44 deletions(-)

diff --git a/include/hardware/hwcomposer.h b/include/hardware/hwcomposer.h
index aa466b3..822a7e7 100644
--- a/include/hardware/hwcomposer.h
+++ b/include/hardware/hwcomposer.h
@@ -35,6 +35,18 @@ __BEGIN_DECLS
 #define HWC_DEVICE_API_VERSION      HWC_DEVICE_API_VERSION_0_1
 #define HWC_API_VERSION             HWC_DEVICE_API_VERSION
 
+/* Users of this header can define HWC_REMOVE_DEPRECATED_VERSIONS to test that
+ * they still work with just the current version declared, before the
+ * deprecated versions are actually removed.
+ *
+ * To find code that still depends on the old versions, set the #define to 1
+ * here. Code that explicitly sets it to zero (rather than simply not defining
+ * it) will still see the old versions.
+ */
+#if !defined(HWC_REMOVE_DEPRECATED_VERSIONS)
+#define HWC_REMOVE_DEPRECATED_VERSIONS 0
+#endif
+
 /*****************************************************************************/
 
 /**
@@ -215,6 +227,12 @@ typedef struct hwc_layer_1 {
              */
             hwc_region_t visibleRegionScreen;
 
+#ifdef QCOM_BSP
+            /* Region of the layer changed in the source buffer since
+             * previous frame */
+            hwc_rect_t dirtyRect;
+#endif
+
             /* Sync fence object that will be signaled when the buffer's
              * contents are available. May be -1 if the contents are already
              * available. This field is only valid during set(), and should be
@@ -299,29 +317,8 @@ typedef struct hwc_layer_1 {
              */
             uint8_t planeAlpha;
 
-            /* Pad to 32 bits */
+            /* reserved for future use */
             uint8_t _pad[3];
-
-            /*
-             * Availability: HWC_DEVICE_API_VERSION_1_5
-             *
-             * This defines the region of the source buffer that has been
-             * modified since the last frame.
-             *
-             * If surfaceDamage.numRects > 0, then it may be assumed that any
-             * portion of the source buffer not covered by one of the rects has
-             * not been modified this frame. If surfaceDamage.numRects == 0,
-             * then the whole source buffer must be treated as if it had been
-             * modified.
-             *
-             * If the layer's contents are not modified relative to the prior
-             * prepare/set cycle, surfaceDamage will contain exactly one empty
-             * rect ([0, 0, 0, 0]).
-             *
-             * The damage rects are relative to the pre-transformed buffer, and
-             * their origin is the top-left corner.
-             */
-            hwc_region_t surfaceDamage;
         };
     };
 
@@ -330,13 +327,13 @@ typedef struct hwc_layer_1 {
      * For 64-bit mode, this struct is 120 bytes (and 8-byte aligned), and needs
      * to be padded as such to maintain binary compatibility.
      */
-    uint8_t reserved[120 - 112];
+    uint8_t reserved[120 - 96];
 #else
     /*
      * For 32-bit mode, this struct is 96 bytes, and needs to be padded as such
      * to maintain binary compatibility.
      */
-    uint8_t reserved[96 - 84];
+    uint8_t reserved[96 - 76];
 #endif
 
 } hwc_layer_1_t;
@@ -828,6 +825,10 @@ static inline int hwc_close_1(hwc_composer_device_1_t* device) {
 
 /*****************************************************************************/
 
+//#ifdef TARGET_NEEDS_HWC_V0
+#include <hardware/hwcomposer_v0.h>
+//#endif
+
 __END_DECLS
 
 #endif /* ANDROID_INCLUDE_HARDWARE_HWCOMPOSER_H */
diff --git a/include/hardware/hwcomposer_defs.h b/include/hardware/hwcomposer_defs.h
index a90822a..bb059f1 100644
--- a/include/hardware/hwcomposer_defs.h
+++ b/include/hardware/hwcomposer_defs.h
@@ -32,12 +32,30 @@ __BEGIN_DECLS
 
 #define HWC_MODULE_API_VERSION_0_1  HARDWARE_MODULE_API_VERSION(0, 1)
 
+//#ifdef TARGET_NEEDS_HWC_V0
+#define HWC_DEVICE_API_VERSION_0_1  HARDWARE_DEVICE_API_VERSION_2(0, 1, HWC_HEADER_VERSION)
+#define HWC_DEVICE_API_VERSION_0_2  HARDWARE_DEVICE_API_VERSION_2(0, 2, HWC_HEADER_VERSION)
+#define HWC_DEVICE_API_VERSION_0_3  HARDWARE_DEVICE_API_VERSION_2(0, 3, HWC_HEADER_VERSION)
+/*#else
 #define HWC_DEVICE_API_VERSION_1_0  HARDWARE_DEVICE_API_VERSION_2(1, 0, HWC_HEADER_VERSION)
 #define HWC_DEVICE_API_VERSION_1_1  HARDWARE_DEVICE_API_VERSION_2(1, 1, HWC_HEADER_VERSION)
 #define HWC_DEVICE_API_VERSION_1_2  HARDWARE_DEVICE_API_VERSION_2(1, 2, HWC_HEADER_VERSION)
 #define HWC_DEVICE_API_VERSION_1_3  HARDWARE_DEVICE_API_VERSION_2(1, 3, HWC_HEADER_VERSION)
 #define HWC_DEVICE_API_VERSION_1_4  HARDWARE_DEVICE_API_VERSION_2(1, 4, HWC_HEADER_VERSION)
-#define HWC_DEVICE_API_VERSION_1_5  HARDWARE_DEVICE_API_VERSION_2(1, 5, HWC_HEADER_VERSION)
+#endif
+*/
+
+#ifdef STE_HARDWARE
+/* STE specific modifications to the hwcomposer API require
+ * a separate DEVICE_API_VERSION since the resulting structures
+ * aren't binary compatible with the vanilla android version.
+ * We don't actually change the version number itself since
+ * that could potentially conflict with future versions of hwcomposer.
+ * Rather we just add the possibility to check for the presence
+ * of STE modifications.
+ */
+#define HWC_DEVICE_API_VERSION_0_3_STE HWC_DEVICE_API_VERSION_0_3
+#endif
 
 enum {
     /* hwc_composer_device_t::set failed in EGL */
@@ -87,7 +105,14 @@ enum {
      * composition type of this layer, then the hwcomposer will allow async
      * position updates to this layer via setCursorPositionAsync().
      */
-    HWC_IS_CURSOR_LAYER = 0x00000002
+    HWC_IS_CURSOR_LAYER = 0x00000002,
+
+    /*
+     * HWC_SCREENSHOT_ANIMATOR_LAYER is set by surfaceflinger to indicate that this
+     * layer is a screenshot animating layer.  HWC uses this info to disable rotation
+     * animation on External Display
+     */
+    HWC_SCREENSHOT_ANIMATOR_LAYER = 0x00000004
 };
 
 /*
@@ -116,8 +141,11 @@ enum {
        cursor overlay hardware. hwcomposer will also all async position updates
        of this layer outside of the normal prepare()/set() loop. Added in
        HWC_DEVICE_API_VERSION_1_4. */
-    HWC_CURSOR_OVERLAY =  5
- };
+    HWC_CURSOR_OVERLAY =  5,
+
+    /* this layer will be handled in the HWC, using a blit engine */
+    HWC_BLIT = 6,
+};
 /*
  * hwc_layer_t::blending values
  */
@@ -151,11 +179,13 @@ enum {
 /* attributes queriable with query() */
 enum {
     /*
+     * Availability: HWC_DEVICE_API_VERSION_0_2
      * Must return 1 if the background layer is supported, 0 otherwise.
      */
     HWC_BACKGROUND_LAYER_SUPPORTED      = 0,
 
     /*
+     * Availability: HWC_DEVICE_API_VERSION_0_3
      * Returns the vsync period in nanoseconds.
      *
      * This query is not used for HWC_DEVICE_API_VERSION_1_1 and later.
@@ -192,41 +222,32 @@ enum {
      */
     HWC_DISPLAY_DPI_X                       = 4,
     HWC_DISPLAY_DPI_Y                       = 5,
-
-    /* Indicates which of the vendor-defined color transforms is provided by
-     * this configuration. */
-    HWC_DISPLAY_COLOR_TRANSFORM             = 6,
+    /* Indicates if the display is secure
+     * For HDMI/WFD if the sink supports HDCP, it will be true
+     * Primary panel is always considered secure
+     */
+    HWC_DISPLAY_SECURE                      = 6,
 };
 
 /* Allowed events for hwc_methods::eventControl() */
 enum {
-    HWC_EVENT_VSYNC     = 0
+    HWC_EVENT_VSYNC     = 0,
+    HWC_EVENT_ORIENTATION
 };
 
 /* Display types and associated mask bits. */
 enum {
     HWC_DISPLAY_PRIMARY     = 0,
     HWC_DISPLAY_EXTERNAL    = 1,    // HDMI, DP, etc.
-#ifdef QTI_BSP
-    HWC_DISPLAY_TERTIARY    = 2,
-    HWC_DISPLAY_VIRTUAL     = 3,
-
-    HWC_NUM_PHYSICAL_DISPLAY_TYPES = 3,
-    HWC_NUM_DISPLAY_TYPES          = 4,
-#else
     HWC_DISPLAY_VIRTUAL     = 2,
 
     HWC_NUM_PHYSICAL_DISPLAY_TYPES = 2,
     HWC_NUM_DISPLAY_TYPES          = 3,
-#endif
 };
 
 enum {
     HWC_DISPLAY_PRIMARY_BIT     = 1 << HWC_DISPLAY_PRIMARY,
     HWC_DISPLAY_EXTERNAL_BIT    = 1 << HWC_DISPLAY_EXTERNAL,
-#ifdef QTI_BSP
-    HWC_DISPLAY_TERTIARY_BIT    = 1 << HWC_DISPLAY_TERTIARY,
-#endif
     HWC_DISPLAY_VIRTUAL_BIT     = 1 << HWC_DISPLAY_VIRTUAL,
 };
 
-- 
2.11.0

