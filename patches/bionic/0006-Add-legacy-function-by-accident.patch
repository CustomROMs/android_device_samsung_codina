From 0784ee5f4fe3c6ac4a70a8549d6e87ad61f9b404 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 20 Aug 2018 22:57:43 +0300
Subject: [PATCH 6/8] Add legacy function by accident.

 libc: Fix absolute_timespec_from_timespec overflow.

A legacy library has uncovered an overflow in this function.
absolute_timespec_from_timespec blindly adds a relative timespec to
the current one, ignoring the possibility of tv_sec overflowing.

This was produced by calling pthread_cond_timedwait_relative_np with a
filled (to maximum values) timespec to create a faux 'infinite timeout'.

This is fixed by clamping the value as high as we can determine is safe.

Change-Id: I2997107ae9d4f7b8f00a5d21778e25b831897c0a
---
 libc/bionic/bionic_time_conversions.cpp | 26 ++++++++++++++++++++++++++
 libc/private/bionic_time_conversions.h  | 15 +++------------
 2 files changed, 29 insertions(+), 12 deletions(-)

diff --git a/libc/bionic/bionic_time_conversions.cpp b/libc/bionic/bionic_time_conversions.cpp
index d21e12eb8..2123eee9f 100644
--- a/libc/bionic/bionic_time_conversions.cpp
+++ b/libc/bionic/bionic_time_conversions.cpp
@@ -26,6 +26,9 @@
  * SUCH DAMAGE.
  */
 
+#include <stdint.h>
+#include <sys/param.h>
+
 #include "private/bionic_time_conversions.h"
 
 #include "private/bionic_constants.h"
@@ -72,3 +75,26 @@ void monotonic_time_from_realtime_time(timespec& monotonic_time, const timespec&
   monotonic_time.tv_sec -= cur_realtime_time.tv_sec;
   monotonic_time.tv_sec += cur_monotonic_time.tv_sec;
 }
+
+void absolute_timespec_from_timespec(timespec& abs_ts, const timespec& ts, clockid_t clock) {
+  clock_gettime(clock, &abs_ts);
+  time_t clock_tv_sec = abs_ts.tv_sec;
+  abs_ts.tv_sec += ts.tv_sec;
+  abs_ts.tv_nsec += ts.tv_nsec;
+  if (abs_ts.tv_nsec >= NS_PER_S) {
+    abs_ts.tv_nsec -= NS_PER_S;
+    abs_ts.tv_sec++;
+  }
+  // With a large relative timespec we might overflow.
+  // Because time_t is arbitrary, we should be fancy handling this.
+  if (abs_ts.tv_sec < clock_tv_sec) {
+    if (sizeof(time_t) == sizeof(int32_t)) {
+      abs_ts.tv_sec = INT32_MAX;
+    } else if (sizeof(time_t) == sizeof(int64_t)) {
+      abs_ts.tv_sec = INT64_MAX;
+    } else {
+      // Just take the largest of the two initial values and hope for the best.
+      abs_ts.tv_sec = MAX(clock_tv_sec, ts.tv_sec);
+    }
+  }
+}
diff --git a/libc/private/bionic_time_conversions.h b/libc/private/bionic_time_conversions.h
index fb049f238..23d1e9d3c 100644
--- a/libc/private/bionic_time_conversions.h
+++ b/libc/private/bionic_time_conversions.h
@@ -45,6 +45,9 @@ __LIBC_HIDDEN__ void timeval_from_timespec(timeval& tv, const timespec& ts);
 __LIBC_HIDDEN__ void monotonic_time_from_realtime_time(timespec& monotonic_time,
                                                        const timespec& realtime_time);
 
+__LIBC_HIDDEN__ void absolute_timespec_from_timespec(timespec& abs_ts, const timespec& ts,
+                                                     clockid_t clock);
+
 __END_DECLS
 
 static inline int check_timespec(const timespec* ts, bool null_allowed) {
@@ -62,16 +65,4 @@ static inline int check_timespec(const timespec* ts, bool null_allowed) {
   return 0;
 }
 
-#if !defined(__LP64__)
-static inline void absolute_timespec_from_timespec(timespec& abs_ts, const timespec& ts, clockid_t clock) {
-  clock_gettime(clock, &abs_ts);
-  abs_ts.tv_sec += ts.tv_sec;
-  abs_ts.tv_nsec += ts.tv_nsec;
-  if (abs_ts.tv_nsec >= NS_PER_S) {
-    abs_ts.tv_nsec -= NS_PER_S;
-    abs_ts.tv_sec++;
-  }
-}
-#endif
-
 #endif
-- 
2.11.0

