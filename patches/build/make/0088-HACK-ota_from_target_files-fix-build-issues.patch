From 7738ee179d56a94b4fe7077e726c31cb6ec8e206 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 27 Aug 2018 00:46:56 +0300
Subject: [PATCH 88/90] HACK: ota_from_target_files: fix build issues

Change-Id: I5496a990cf2f78dc8d72dd05a3effaa882bddb08
---
 tools/releasetools/edify_generator.py       | 20 ++++++++++++++++++++
 tools/releasetools/ota_from_target_files.py | 10 ++++++++--
 2 files changed, 28 insertions(+), 2 deletions(-)

diff --git a/tools/releasetools/edify_generator.py b/tools/releasetools/edify_generator.py
index 11b7fc82e..f03521778 100644
--- a/tools/releasetools/edify_generator.py
+++ b/tools/releasetools/edify_generator.py
@@ -348,6 +348,26 @@ class EdifyGenerator(object):
 
   def SetPermissions(self, fn, uid, gid, mode, selabel, capabilities):
     """Set file ownership and permissions."""
+    if fn == "/system":
+      uid = 0
+      gid = 0
+      mode = 0755
+      selabel = "u:object_r:system_file:s0"
+      capabilities = "0x0"
+    elif selabel is None:
+      # comment line below for for debugging
+      return
+      s = ""
+      with open("/tmp/setpermissions.txt", "a+") as f:
+        #for t in (fn, uid, gid, mode, capabilities):
+        s += "fn: %s %s\n" % (str(fn), dir(fn))
+        s += "uid: %s %s\n" % (str(uid), dir(uid))
+        s += "gid: %s %s\n" % (str(gid), dir(gid))
+        s += "mode: %s %s\n" % (str(mode), dir(mode))
+        s += "selabel: %s %s\n" % (str(selabel), dir(selabel))
+        s += "capabilities: %s %s\n" % (str(capabilities), dir(capabilities))
+        f.write(s)
+      return
     if not self.info.get("use_set_metadata", False):
       self.script.append('set_perm(%d, %d, 0%o, "%s");' % (uid, gid, mode, fn))
     else:
diff --git a/tools/releasetools/ota_from_target_files.py b/tools/releasetools/ota_from_target_files.py
index bdef4d6bb..f3a165569 100755
--- a/tools/releasetools/ota_from_target_files.py
+++ b/tools/releasetools/ota_from_target_files.py
@@ -176,6 +176,7 @@ A/B OTA specific options
 
 from __future__ import print_function
 
+import copy
 import multiprocessing
 import os.path
 import shlex
@@ -351,6 +352,7 @@ class BuildInfo(object):
   def WriteMountOemScript(self, script):
     assert self.oem_props is not None
     recovery_mount_options = self.info_dict.get("recovery_mount_options")
+    recovery_mount_options = "ext4=max_batch_time=0,commit=1,data=ordered,barrier=1,errors=panic,nodelalloc"
     script.Mount("/oem", recovery_mount_options)
 
   def WriteDeviceAssertions(self, script, oem_no_mount):
@@ -1144,6 +1146,7 @@ else if get_stage("%(bcb_dev)s") == "3/3" then
     system_diff.WriteScript(script, output_zip)
   else:
     script.FormatPartition("/system")
+    recovery_mount_options = "ext4=max_batch_time=0,commit=1,data=ordered,barrier=1,errors=panic,nodelalloc"
     script.Mount("/system", recovery_mount_options)
     if not has_recovery_patch:
       script.UnpackPackageDir("recovery", "/system")
@@ -1178,6 +1181,7 @@ else if get_stage("%(bcb_dev)s") == "3/3" then
       vendor_diff.WriteScript(script, output_zip)
     else:
       script.FormatPartition("/vendor")
+      recovery_mount_options = "ext4=max_batch_time=0,commit=1,data=ordered,barrier=1,errors=panic,nodelalloc"
       script.Mount("/vendor", recovery_mount_options)
       script.UnpackPackageDir("vendor", "/vendor")
 
@@ -1242,8 +1246,8 @@ endif;
   script.AddToZip(input_zip, output_zip, input_path=OPTIONS.updater_binary)
   metadata["ota-required-cache"] = str(script.required_cache)
 
-  common.ZipWriteStr(output_zip, "system/build.prop",
-                     ""+input_zip.read("SYSTEM/build.prop"))
+  #common.ZipWriteStr(output_zip, "system/build.prop",
+  #                   ""+input_zip.read("SYSTEM/build.prop"))
 
   # We haven't written the metadata entry, which will be done in
   # FinalizeMetadata.
@@ -2343,6 +2347,7 @@ def WriteIncrementalOTAPackage(target_zip, source_zip, output_zip):
 
   recovery_mount_options = OPTIONS.source_info_dict.get(
       "recovery_mount_options")
+  recovery_mount_options = "ext4=max_batch_time=0,commit=1,data=ordered,barrier=1,errors=panic,nodelalloc"
   source_oem_props = OPTIONS.source_info_dict.get("oem_fingerprint_properties")
   target_oem_props = OPTIONS.target_info_dict.get("oem_fingerprint_properties")
   oem_dicts = None
@@ -2718,6 +2723,7 @@ endif;
 endif;
 """ % bcb_dev)
 
+  recovery_mount_options = "ext4=max_batch_time=0,commit=1,data=ordered,barrier=1,errors=panic,nodelalloc"
   if OPTIONS.verify and system_diff:
     script.Print("Remounting and verifying system partition files...")
     script.Unmount("/system")
-- 
2.17.0

