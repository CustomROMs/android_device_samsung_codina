From 2aecff49743bbcb57eb9b9f5c1f32d97d90101cc Mon Sep 17 00:00:00 2001
From: Ricardo Cerqueira <ricardo@cyngn.com>
Date: Mon, 25 Jan 2016 16:49:27 +0000
Subject: [PATCH 24/90] binary: Allow specifying a path for generated proto
 headers

protobuf compilation defaults to dropping the generated objects and
headers onto a path derived from the origin source path. This poses
a problem with some of our repositories since they're not placed in
their original paths, and may include hard references to pb headers
assuming the original directory.

Typical use of this will be to place a

LOCAL_PROTOC_OUTPUT := <original repo path>

line in the relevant module block (for example, "hardware/ril" for our
"hardware/ril-caf")

Change-Id: Ib9b0cadd47e29a0d2e693b331cfc18e71b048ee5

binary: Don't run protobuf header relocations if origin/target are the same

Change-Id: I3746746bdf1526674f345d884e2eccef85e946ef

build: Fix LOCAL_PROTOC_OUTPUT

 * This code was refactored in 7.1 adjust accordingly.
 * This is used by projects like ril-caf where the proto-c generated
   sources dir might not match the project path.

Change-Id: I7a7d0bb7a397b02deb5406a591059a877ac2c6da
---
 core/binary.mk     | 12 ++++++++++++
 core/clear_vars.mk |  1 +
 2 files changed, 13 insertions(+)

diff --git a/core/binary.mk b/core/binary.mk
index 3f35a7657..ca1bddc80 100644
--- a/core/binary.mk
+++ b/core/binary.mk
@@ -886,13 +886,25 @@ my_proto_c_includes += $(proto_gen_dir)
 proto_generated_cpps := $(addprefix $(proto_gen_dir)/, \
     $(patsubst %.proto,%.pb$(my_proto_source_suffix),$(proto_sources_fullpath)))
 
+define copy-proto-files
+$(if $(PRIVATE_PROTOC_OUTPUT), \
+   $(if $(call streq,$(PRIVATE_PROTOC_INPUT),$(PRIVATE_PROTOC_OUTPUT)),, \
+   $(eval proto_generated_path := $(dir $(subst $(PRIVATE_PROTOC_INPUT),$(PRIVATE_PROTOC_OUTPUT),$@)))
+   @mkdir -p $(dir $(proto_generated_path))
+   @echo "Protobuf relocation: $(basename $@).h => $(proto_generated_path)"
+   @cp -f $(basename $@).h $(proto_generated_path) ),)
+endef
+
 # Ensure the transform-proto-to-cc rule is only defined once in multilib build.
 ifndef $(my_host)$(LOCAL_MODULE_CLASS)_$(LOCAL_MODULE)_proto_defined
 $(proto_generated_cpps): PRIVATE_PROTO_INCLUDES := $(TOP)
 $(proto_generated_cpps): PRIVATE_PROTOC_FLAGS := $(LOCAL_PROTOC_FLAGS) $(my_protoc_flags)
+$(proto_generated_cpps): PRIVATE_PROTOC_OUTPUT := $(LOCAL_PROTOC_OUTPUT)
+$(proto_generated_cpps): PRIVATE_PROTOC_INPUT := $(LOCAL_PATH)
 $(proto_generated_cpps): PRIVATE_RENAME_CPP_EXT := $(my_rename_cpp_ext)
 $(proto_generated_cpps): $(proto_gen_dir)/%.pb$(my_proto_source_suffix): %.proto $(my_protoc_deps) $(PROTOC)
 	$(transform-proto-to-cc)
+	$(copy-proto-files)
 
 $(my_host)$(LOCAL_MODULE_CLASS)_$(LOCAL_MODULE)_proto_defined := true
 endif
diff --git a/core/clear_vars.mk b/core/clear_vars.mk
index bfc45635a..e59fbbe66 100644
--- a/core/clear_vars.mk
+++ b/core/clear_vars.mk
@@ -452,6 +452,7 @@ LOCAL_STATIC_LIBRARIES_32:=
 LOCAL_STATIC_LIBRARIES_64:=
 LOCAL_WHOLE_STATIC_LIBRARIES_32:=
 LOCAL_WHOLE_STATIC_LIBRARIES_64:=
+LOCAL_PROTOC_OUTPUT:=
 
 # Robolectric variables
 LOCAL_INSTRUMENT_SOURCE_DIRS :=
-- 
2.17.0

