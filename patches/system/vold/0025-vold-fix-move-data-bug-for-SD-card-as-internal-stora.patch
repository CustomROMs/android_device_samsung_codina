From 99e4a95fc42a2cf702627bbfa7acc0cff646dee0 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 20 Aug 2018 22:57:43 +0300
Subject: [PATCH 25/27] vold: fix move-data bug for SD card as internal storage

It failed to remove file while SD card formatted as internal storage.

Test: test steps described as below:

 1. Insert SD card and format it as internal storage.
 2. Click 'Move data'.
 3. Check files in path of /data/media/0/ and found files not removed.
---
 MoveStorage.cpp | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/MoveStorage.cpp b/MoveStorage.cpp
index 4624026..03b7625 100644
--- a/MoveStorage.cpp
+++ b/MoveStorage.cpp
@@ -44,6 +44,7 @@ static const int kMoveFailedInternalError = -6;
 
 static const char* kCpPath = "/system/bin/cp";
 static const char* kRmPath = "/system/bin/rm";
+static const char* kShPath = "/system/bin/sh";
 
 static const char* kWakeLock = "MoveTask";
 
@@ -63,17 +64,27 @@ static status_t pushBackContents(const std::string& path, std::vector<std::strin
     }
     bool found = false;
     struct dirent* ent;
+    /*
+     * -f (force): remove without confirmation, no error if it doesn't exist
+     * -R (recursive): remove directory contents
+     */
+    std::string options("/system/bin/rm -f -R");
+
     while ((ent = readdir(dir)) != NULL) {
         if ((!strcmp(ent->d_name, ".")) || (!strcmp(ent->d_name, ".."))) {
             continue;
         }
         if (addWildcard) {
-            cmd.push_back(StringPrintf("%s/%s/*", path.c_str(), ent->d_name));
+            options += StringPrintf(" %s/%s/*", path.c_str(), ent->d_name);
         } else {
             cmd.push_back(StringPrintf("%s/%s", path.c_str(), ent->d_name));
         }
         found = true;
     }
+
+    if (addWildcard && found)
+        cmd.push_back(options);
+
     closedir(dir);
     return found ? OK : -1;
 }
@@ -86,9 +97,8 @@ static status_t execRm(const std::string& path, int startProgress, int stepProgr
     uint64_t startFreeBytes = GetFreeBytes(path);
 
     std::vector<std::string> cmd;
-    cmd.push_back(kRmPath);
-    cmd.push_back("-f"); /* force: remove without confirmation, no error if it doesn't exist */
-    cmd.push_back("-R"); /* recursive: remove directory contents */
+    cmd.push_back(kShPath);
+    cmd.push_back("-c");
     if (pushBackContents(path, cmd, true) != OK) {
         LOG(WARNING) << "No contents in " << path;
         return OK;
-- 
2.11.0

