From d225db14761b6849c805ac5a26888e0f68933c8f Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Thu, 20 Sep 2018 17:36:29 +0300
Subject: [PATCH 25/30] sdcard: reset to lineage-15.1

Change-Id: I4b91e36fd6b2ac233f07c35067703dbec7b181f9
---
 sdcard/Android.bp |  39 ------------
 sdcard/Android.mk |  21 +++++++
 sdcard/OWNERS     |   1 -
 sdcard/fuse.cpp   |   2 +-
 sdcard/sdcard.cpp | 181 +++++++++++++++++-------------------------------------
 5 files changed, 79 insertions(+), 165 deletions(-)
 delete mode 100644 sdcard/Android.bp
 create mode 100644 sdcard/Android.mk
 delete mode 100644 sdcard/OWNERS

diff --git a/sdcard/Android.bp b/sdcard/Android.bp
deleted file mode 100644
index 0897e0e5f..000000000
--- a/sdcard/Android.bp
+++ /dev/null
@@ -1,39 +0,0 @@
-cc_library_static {
-    srcs: [
-        "sdcard.cpp",
-        "fuse.cpp",
-    ],
-    name: "libsdcard",
-    cflags: [
-        "-Wall",
-        "-Wno-unused-parameter",
-        "-Werror",
-    ],
-    shared_libs: [
-        "libbase",
-        "libcutils",
-        "libminijail",
-        "libpackagelistparser",
-    ],
-    sanitize: {
-        misc_undefined: ["integer"],
-    },
-}
-
-cc_binary {
-    srcs: ["main.c"],
-    name: "sdcard",
-    cflags: [
-        "-Wall",
-        "-Wno-unused-parameter",
-        "-Werror",
-    ],
-    static_libs: ["libsdcard"],
-    shared_libs: [
-        "libbase",
-        "libc",
-        "libcutils",
-        "libminijail",
-        "libpackagelistparser",
-    ],
-}
diff --git a/sdcard/Android.mk b/sdcard/Android.mk
new file mode 100644
index 000000000..4ed17a6b1
--- /dev/null
+++ b/sdcard/Android.mk
@@ -0,0 +1,21 @@
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES := sdcard.cpp fuse.cpp
+LOCAL_MODULE := libsdcard
+LOCAL_CFLAGS := -Wall -Wno-unused-parameter
+LOCAL_SHARED_LIBRARIES := libbase libcutils libminijail libpackagelistparser
+
+LOCAL_SANITIZE := integer
+LOCAL_CLANG := true
+LOCAL_MODULE_TAGS := optional
+include $(BUILD_STATIC_LIBRARY)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := main.c
+LOCAL_MODULE := sdcard
+LOCAL_CFLAGS := -Wall -Wno-unused-parameter -Werror
+LOCAL_STATIC_LIBRARIES := libsdcard
+LOCAL_SHARED_LIBRARIES := libbase libc libcutils libminijail libpackagelistparser
+include $(BUILD_EXECUTABLE)
diff --git a/sdcard/OWNERS b/sdcard/OWNERS
deleted file mode 100644
index 199a0f885..000000000
--- a/sdcard/OWNERS
+++ /dev/null
@@ -1 +0,0 @@
-drosen@google.com
diff --git a/sdcard/fuse.cpp b/sdcard/fuse.cpp
index 10d0f0418..95559d7ff 100644
--- a/sdcard/fuse.cpp
+++ b/sdcard/fuse.cpp
@@ -323,7 +323,7 @@ static bool check_caller_access_to_name(struct fuse* fuse,
 
     /* Root always has access; access for any other UIDs should always
      * be controlled through packages.list. */
-    if (hdr->uid == AID_ROOT) {
+    if (hdr->uid == 0) {
         return true;
     }
 
diff --git a/sdcard/sdcard.cpp b/sdcard/sdcard.cpp
index 07f2682b6..53d0508e9 100644
--- a/sdcard/sdcard.cpp
+++ b/sdcard/sdcard.cpp
@@ -78,54 +78,9 @@
 
 #include "fuse.h"
 
-#define PROP_FUSE_DEVICE "ro.sys.sdcard_fuse"
 #define PROP_SDCARDFS_DEVICE "ro.sys.sdcardfs"
 #define PROP_SDCARDFS_USER "persist.sys.sdcardfs"
 
-static bool supports_esdfs(void) {
-    std::string filesystems;
-    if (!android::base::ReadFileToString("/proc/filesystems", &filesystems)) {
-        PLOG(ERROR) << "Could not read /proc/filesystems";
-        return false;
-    }
-    for (const auto& fs : android::base::Split(filesystems, "\n")) {
-        if (fs.find("esdfs") != std::string::npos) return true;
-    }
-    return false;
-}
-
-static bool should_use_sdcardfs(void) {
-    char property[PROPERTY_VALUE_MAX];
-
-    // Allow user to have a strong opinion about state
-    property_get(PROP_SDCARDFS_USER, property, "");
-    if (!strcmp(property, "force_on")) {
-        LOG(WARNING) << "User explicitly enabled sdcardfs";
-        return true;
-    } else if (!strcmp(property, "force_off")) {
-        LOG(WARNING) << "User explicitly disabled sdcardfs";
-        return !supports_esdfs();
-    }
-
-    // Fall back to device opinion about state
-    if (property_get_bool(PROP_SDCARDFS_DEVICE, true)) {
-        LOG(WARNING) << "Device explicitly enabled sdcardfs";
-        return true;
-    } else {
-        LOG(WARNING) << "Device explicitly disabled sdcardfs";
-        return !supports_esdfs();
-    }
-}
-
-static bool should_use_fuse(void) {
-    if (property_get_bool(PROP_FUSE_DEVICE, false)) {
-        LOG(WARNING) << "Device explicitly enabled fuse";
-        return true;
-    } else {
-        return false;
-    }
-}
-
 /* Supplementary groups to execute with. */
 static const gid_t kGroups[1] = { AID_PACKAGE_INFO };
 
@@ -294,9 +249,7 @@ static void run(const char* source_path, const char* label, uid_t uid,
     global.root.uid = AID_ROOT;
     global.root.under_android = false;
 
-    // Clang static analyzer think strcpy potentially overwrites other fields
-    // in global. Use snprintf() to mute the false warning.
-    snprintf(global.source_path, sizeof(global.source_path), "%s", source_path);
+    strcpy(global.source_path, source_path);
 
     if (multi_user) {
         global.root.perm = PERM_PRE_ROOT;
@@ -366,64 +319,33 @@ static void run(const char* source_path, const char* label, uid_t uid,
 
 static bool sdcardfs_setup(const std::string& source_path, const std::string& dest_path,
                            uid_t fsuid, gid_t fsgid, bool multi_user, userid_t userid, gid_t gid,
-                           mode_t mask, bool derive_gid, bool default_normal, bool use_esdfs) {
-    // Try several attempts, each time with one less option, to gracefully
-    // handle older kernels that aren't updated yet.
-    for (int i = 0; i < 4; i++) {
-        std::string new_opts;
-        if (multi_user && i < 3) new_opts += "multiuser,";
-        if (derive_gid && i < 2) new_opts += "derive_gid,";
-        if (default_normal && i < 1) new_opts += "default_normal,";
-
-        auto opts = android::base::StringPrintf("fsuid=%d,fsgid=%d,%smask=%d,userid=%d,gid=%d",
-                                                fsuid, fsgid, new_opts.c_str(), mask, userid, gid);
-        if (mount(source_path.c_str(), dest_path.c_str(), use_esdfs ? "esdfs" : "sdcardfs",
-                  MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_NOATIME, opts.c_str()) == -1) {
-            PLOG(WARNING) << "Failed to mount sdcardfs with options " << opts;
+                           mode_t mask, bool derive_gid) {
+    std::string opts = android::base::StringPrintf("uid=1023,gid=1023,wgid=1023,derive=unified");
+
+    if (mount(source_path.c_str(), dest_path.c_str(), "sdcardfs",
+              MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_NOATIME, opts.c_str()) == -1) {
+        if (derive_gid) {
+            PLOG(ERROR) << "trying to mount sdcardfs filesystem without derive_gid";
+            /* Maybe this isn't supported on this kernel. Try without. */
+            opts = android::base::StringPrintf("fsuid=%d,fsgid=%d,%smask=%d,userid=%d,gid=%d",
+                                               fsuid, fsgid, multi_user ? "multiuser," : "", mask,
+                                               userid, gid);
+            if (mount(source_path.c_str(), dest_path.c_str(), "sdcardfs",
+                      MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_NOATIME, opts.c_str()) == -1) {
+                PLOG(ERROR) << "failed to mount sdcardfs filesystem";
+                return false;
+            }
         } else {
-            return true;
+            PLOG(ERROR) << "failed to mount sdcardfs filesystem";
+            return false;
         }
     }
-
-    return false;
-}
-
-static bool sdcardfs_setup_bind_remount(const std::string& source_path, const std::string& dest_path,
-                                        gid_t gid, mode_t mask) {
-    std::string opts = android::base::StringPrintf("mask=%d,gid=%d", mask, gid);
-
-    if (mount(source_path.c_str(), dest_path.c_str(), nullptr,
-            MS_BIND, nullptr) != 0) {
-        PLOG(ERROR) << "failed to bind mount sdcardfs filesystem";
-        return false;
-    }
-
-    if (mount(source_path.c_str(), dest_path.c_str(), "none",
-            MS_REMOUNT | MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_NOATIME, opts.c_str()) != 0) {
-        PLOG(ERROR) << "failed to mount sdcardfs filesystem";
-        if (umount2(dest_path.c_str(), MNT_DETACH))
-            PLOG(WARNING) << "Failed to unmount bind";
-        return false;
-    }
-
     return true;
 }
 
-static bool sdcardfs_setup_secondary(const std::string& default_path, const std::string& source_path,
-                                     const std::string& dest_path, uid_t fsuid, gid_t fsgid,
-                                     bool multi_user, userid_t userid, gid_t gid, mode_t mask,
-                                     bool derive_gid, bool default_normal, bool use_esdfs) {
-    if (use_esdfs) {
-        return sdcardfs_setup(source_path, dest_path, fsuid, fsgid, multi_user, userid, gid, mask,
-                              derive_gid, default_normal, use_esdfs);
-    } else {
-        return sdcardfs_setup_bind_remount(default_path, dest_path, gid, mask);
-    }
-}
-
 static void run_sdcardfs(const std::string& source_path, const std::string& label, uid_t uid,
                          gid_t gid, userid_t userid, bool multi_user, bool full_write,
-                         bool derive_gid, bool default_normal, bool use_esdfs) {
+                         bool derive_gid) {
     std::string dest_path_default = "/mnt/runtime/default/" + label;
     std::string dest_path_read = "/mnt/runtime/read/" + label;
     std::string dest_path_write = "/mnt/runtime/write/" + label;
@@ -433,13 +355,11 @@ static void run_sdcardfs(const std::string& source_path, const std::string& labe
         // Multi-user storage is fully isolated per user, so "other"
         // permissions are completely masked off.
         if (!sdcardfs_setup(source_path, dest_path_default, uid, gid, multi_user, userid,
-                            AID_SDCARD_RW, 0006, derive_gid, default_normal, use_esdfs) ||
-            !sdcardfs_setup_secondary(dest_path_default, source_path, dest_path_read, uid, gid,
-                                      multi_user, userid, AID_EVERYBODY, 0027, derive_gid,
-                                      default_normal, use_esdfs) ||
-            !sdcardfs_setup_secondary(dest_path_default, source_path, dest_path_write, uid, gid,
-                                      multi_user, userid, AID_EVERYBODY, full_write ? 0007 : 0027,
-                                      derive_gid, default_normal, use_esdfs)) {
+                            AID_SDCARD_RW, 0006, derive_gid)
+                || !sdcardfs_setup(source_path, dest_path_read, uid, gid, multi_user, userid,
+                                   AID_EVERYBODY, 0027, derive_gid)
+                || !sdcardfs_setup(source_path, dest_path_write, uid, gid, multi_user, userid,
+                                   AID_EVERYBODY, full_write ? 0007 : 0027, derive_gid)) {
             LOG(FATAL) << "failed to sdcardfs_setup";
         }
     } else {
@@ -447,13 +367,11 @@ static void run_sdcardfs(const std::string& source_path, const std::string& labe
         // the Android directories are masked off to a single user
         // deep inside attr_from_stat().
         if (!sdcardfs_setup(source_path, dest_path_default, uid, gid, multi_user, userid,
-                            AID_SDCARD_RW, 0006, derive_gid, default_normal, use_esdfs) ||
-            !sdcardfs_setup_secondary(dest_path_default, source_path, dest_path_read, uid, gid,
-                                      multi_user, userid, AID_EVERYBODY, full_write ? 0027 : 0022,
-                                      derive_gid, default_normal, use_esdfs) ||
-            !sdcardfs_setup_secondary(dest_path_default, source_path, dest_path_write, uid, gid,
-                                      multi_user, userid, AID_EVERYBODY, full_write ? 0007 : 0022,
-                                      derive_gid, default_normal, use_esdfs)) {
+                            AID_SDCARD_RW, 0006, derive_gid)
+                || !sdcardfs_setup(source_path, dest_path_read, uid, gid, multi_user, userid,
+                                   AID_EVERYBODY, full_write ? 0027 : 0022, derive_gid)
+                || !sdcardfs_setup(source_path, dest_path_write, uid, gid, multi_user, userid,
+                                   AID_EVERYBODY, full_write ? 0007 : 0022, derive_gid)) {
             LOG(FATAL) << "failed to sdcardfs_setup";
         }
     }
@@ -481,6 +399,29 @@ static bool supports_sdcardfs(void) {
     return false;
 }
 
+static bool should_use_sdcardfs(void) {
+    char property[PROPERTY_VALUE_MAX];
+
+    // Allow user to have a strong opinion about state
+    property_get(PROP_SDCARDFS_USER, property, "");
+    if (!strcmp(property, "force_on")) {
+        LOG(WARNING) << "User explicitly enabled sdcardfs";
+        return supports_sdcardfs();
+    } else if (!strcmp(property, "force_off")) {
+        LOG(WARNING) << "User explicitly disabled sdcardfs";
+        return false;
+    }
+
+    // Fall back to device opinion about state
+    if (property_get_bool(PROP_SDCARDFS_DEVICE, true)) {
+        LOG(WARNING) << "Device explicitly enabled sdcardfs";
+        return supports_sdcardfs();
+    } else {
+        LOG(WARNING) << "Device explicitly disabled sdcardfs";
+        return false;
+    }
+}
+
 static int usage() {
     LOG(ERROR) << "usage: sdcard [OPTIONS] <source_path> <label>"
                << "    -u: specify UID to run as"
@@ -501,16 +442,12 @@ extern "C" int sdcard_main(int argc, char **argv) {
     bool multi_user = false;
     bool full_write = false;
     bool derive_gid = false;
-    bool default_normal = false;
     int i;
     struct rlimit rlim;
     int fs_version;
 
-    setenv("ANDROID_LOG_TAGS", "*:v", 1);
-    android::base::InitLogging(argv, android::base::LogdLogger(android::base::SYSTEM));
-
     int opt;
-    while ((opt = getopt(argc, argv, "u:g:U:mwGi")) != -1) {
+    while ((opt = getopt(argc, argv, "u:g:U:mwG")) != -1) {
         switch (opt) {
             case 'u':
                 uid = strtoul(optarg, NULL, 10);
@@ -530,9 +467,6 @@ extern "C" int sdcard_main(int argc, char **argv) {
             case 'G':
                 derive_gid = true;
                 break;
-            case 'i':
-                default_normal = true;
-                break;
             case '?':
             default:
                 return usage();
@@ -575,11 +509,10 @@ extern "C" int sdcard_main(int argc, char **argv) {
         sleep(1);
     }
 
-    if (should_use_fuse() && !supports_sdcardfs()) {
-        run(source_path, label, uid, gid, userid, multi_user, full_write);
+    if (should_use_sdcardfs()) {
+        run_sdcardfs(source_path, label, uid, gid, userid, multi_user, full_write, derive_gid);
     } else {
-        run_sdcardfs(source_path, label, uid, gid, userid, multi_user, full_write, derive_gid,
-                     default_normal, !should_use_sdcardfs());
+        run(source_path, label, uid, gid, userid, multi_user, full_write);
     }
     return 1;
 }
-- 
2.11.0

