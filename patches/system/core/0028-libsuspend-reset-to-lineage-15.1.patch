From 7cd2176fab159c49373275ac29a9c6c2a893fbe6 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 22 Sep 2018 00:27:12 +0300
Subject: [PATCH 28/31] libsuspend: reset to lineage-15.1

Change-Id: Icd3f3394ae65ef4dc7e5124f50e64a0d4185d737
---
 libsuspend/Android.bp                    |  4 +--
 libsuspend/autosuspend.c                 | 62 ++++++++++++++------------------
 libsuspend/autosuspend_ops.h             |  6 ++--
 libsuspend/autosuspend_wakeup_count.c    |  2 +-
 libsuspend/include/suspend/autosuspend.h | 13 +------
 5 files changed, 32 insertions(+), 55 deletions(-)

diff --git a/libsuspend/Android.bp b/libsuspend/Android.bp
index b3e36c2bd..274b9997b 100644
--- a/libsuspend/Android.bp
+++ b/libsuspend/Android.bp
@@ -9,12 +9,12 @@ cc_library {
 
     srcs: [
         "autosuspend.c",
-        "autosuspend_wakeup_count.cpp",
+        "autosuspend_earlysuspend.c",
+        "autosuspend_wakeup_count.c",
     ],
     export_include_dirs: ["include"],
     local_include_dirs: ["include"],
     shared_libs: [
-        "libbase",
         "liblog",
         "libcutils",
     ],
diff --git a/libsuspend/autosuspend.c b/libsuspend/autosuspend.c
index b87f59cd6..342d0d8fc 100644
--- a/libsuspend/autosuspend.c
+++ b/libsuspend/autosuspend.c
@@ -24,25 +24,40 @@
 
 #include "autosuspend_ops.h"
 
-static struct autosuspend_ops* autosuspend_ops = NULL;
+static struct autosuspend_ops *autosuspend_ops;
 static bool autosuspend_enabled;
+static bool autosuspend_inited;
 
-static int autosuspend_init(void) {
-    if (autosuspend_ops != NULL) {
+static int autosuspend_init(void)
+{
+    if (autosuspend_inited) {
         return 0;
     }
 
+    autosuspend_ops = autosuspend_earlysuspend_init();
+    if (autosuspend_ops) {
+        goto out;
+    }
+
     autosuspend_ops = autosuspend_wakeup_count_init();
-    if (autosuspend_ops == NULL) {
-        ALOGE("failed to initialize autosuspend");
+    if (autosuspend_ops) {
+        goto out;
+    }
+
+    if (!autosuspend_ops) {
+        ALOGE("failed to initialize autosuspend\n");
         return -1;
     }
 
-    ALOGV("autosuspend initialized");
+out:
+    autosuspend_inited = true;
+
+    ALOGV("autosuspend initialized\n");
     return 0;
 }
 
-int autosuspend_enable(void) {
+int autosuspend_enable(void)
+{
     int ret;
 
     ret = autosuspend_init();
@@ -50,7 +65,7 @@ int autosuspend_enable(void) {
         return ret;
     }
 
-    ALOGV("autosuspend_enable");
+    ALOGV("autosuspend_enable\n");
 
     if (autosuspend_enabled) {
         return 0;
@@ -65,7 +80,8 @@ int autosuspend_enable(void) {
     return 0;
 }
 
-int autosuspend_disable(void) {
+int autosuspend_disable(void)
+{
     int ret;
 
     ret = autosuspend_init();
@@ -73,7 +89,7 @@ int autosuspend_disable(void) {
         return ret;
     }
 
-    ALOGV("autosuspend_disable");
+    ALOGV("autosuspend_disable\n");
 
     if (!autosuspend_enabled) {
         return 0;
@@ -87,29 +103,3 @@ int autosuspend_disable(void) {
     autosuspend_enabled = false;
     return 0;
 }
-
-int autosuspend_force_suspend(int timeout_ms) {
-    int ret;
-
-    ret = autosuspend_init();
-    if (ret) {
-        return ret;
-    }
-
-    ALOGV("autosuspend_force_suspend");
-
-    return autosuspend_ops->force_suspend(timeout_ms);
-}
-
-void autosuspend_set_wakeup_callback(void (*func)(bool success)) {
-    int ret;
-
-    ret = autosuspend_init();
-    if (ret) {
-        return;
-    }
-
-    ALOGV("set_wakeup_callback");
-
-    autosuspend_ops->set_wakeup_callback(func);
-}
diff --git a/libsuspend/autosuspend_ops.h b/libsuspend/autosuspend_ops.h
index b0024c8bb..698e25be8 100644
--- a/libsuspend/autosuspend_ops.h
+++ b/libsuspend/autosuspend_ops.h
@@ -20,12 +20,10 @@
 struct autosuspend_ops {
     int (*enable)(void);
     int (*disable)(void);
-    int (*force_suspend)(int timeout_ms);
-    void (*set_wakeup_callback)(void (*func)(bool success));
 };
 
-__BEGIN_DECLS
+struct autosuspend_ops *autosuspend_autosleep_init(void);
+struct autosuspend_ops *autosuspend_earlysuspend_init(void);
 struct autosuspend_ops *autosuspend_wakeup_count_init(void);
-__END_DECLS
 
 #endif
diff --git a/libsuspend/autosuspend_wakeup_count.c b/libsuspend/autosuspend_wakeup_count.c
index e2e48ee3b..2da204ae0 100644
--- a/libsuspend/autosuspend_wakeup_count.c
+++ b/libsuspend/autosuspend_wakeup_count.c
@@ -155,7 +155,7 @@ static int autosuspend_wakeup_count_disable(void)
     return ret;
 }
 
-void autosuspend_set_wakeup_callback(void (*func)(bool success))
+void set_wakeup_callback(void (*func)(bool success))
 {
     if (wakeup_func != NULL) {
         ALOGE("Duplicate wakeup callback applied, keeping original");
diff --git a/libsuspend/include/suspend/autosuspend.h b/libsuspend/include/suspend/autosuspend.h
index 21f4d61bf..59188a804 100644
--- a/libsuspend/include/suspend/autosuspend.h
+++ b/libsuspend/include/suspend/autosuspend.h
@@ -45,24 +45,13 @@ int autosuspend_enable(void);
 int autosuspend_disable(void);
 
 /*
- * force_suspend
- *
- * Forces suspend to happen.  timeout_ms is used to give system a chance to suspend gracefully.
- * When timeout expires, suspend will be forced via mem --> /sys/power/state.  timeout_ms of 0
- * will force suspend immediately.
- *
- * Returns 0 if system suspended, -1 if suspend did not occur.
- */
-int autosuspend_force_suspend(int timeout_ms);
-
-/*
  * set_wakeup_callback
  *
  * Set a function to be called each time the device returns from suspend.
  * success is true if the suspend was sucessful and false if the suspend
  * aborted due to some reason.
  */
-void autosuspend_set_wakeup_callback(void (*func)(bool success));
+void set_wakeup_callback(void (*func)(bool success));
 
 __END_DECLS
 
-- 
2.11.0

