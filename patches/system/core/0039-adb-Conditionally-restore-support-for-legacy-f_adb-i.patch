From f8f78c398442799edd279bcc1c58ca9b35ba621c Mon Sep 17 00:00:00 2001
From: Dan Pasanen <dan.pasanen@gmail.com>
Date: Wed, 28 Feb 2018 18:22:27 -0600
Subject: [PATCH 39/42] adb: Conditionally restore support for legacy f_adb
 interface

 * Restore full support of USB and ADB on devices using the
    legacy f_adb kernel drivers (to enable it, devices must
    set TARGET_USES_LEGACY_ADB_INTERFACE flag to true)

 * Forward port with commits:
    'adb: kill adb_thread_{create, join, detach, exit}'

Change-Id: Ic8a8793357b70adde270ae83c8279329e7ddeced
---
 adb/Android.bp      |   6 +-
 adb/adb.h           |   3 +
 adb/daemon/main.cpp |   4 ++
 adb/daemon/usb.cpp  | 141 ++++++++++++++++++++++++++++++++++++++++++++
 adb/daemon/usb.h    |   5 ++
 rootdir/ueventd.rc  |   2 +
 6 files changed, 160 insertions(+), 1 deletion(-)

diff --git a/adb/Android.bp b/adb/Android.bp
index c0e4c5758..e66a323ec 100644
--- a/adb/Android.bp
+++ b/adb/Android.bp
@@ -23,6 +23,7 @@ cc_defaults {
         "-Wno-unused-parameter",
         "-Wno-missing-field-initializers",
         "-Wvla",
+        "-DLEGACY_ADB_INTERFACE",
     ],
     rtti: true,
 
@@ -41,7 +42,10 @@ cc_defaults {
 
     target: {
         android: {
-            cflags: ["-DADB_HOST=0"],
+            cflags: [
+                "-DADB_HOST=0",
+                "-DLEGACY_ADB_INTERFACE",
+            ],
         },
 
         host: {
diff --git a/adb/adb.h b/adb/adb.h
index ac4257147..3e7f8b1fd 100644
--- a/adb/adb.h
+++ b/adb/adb.h
@@ -205,6 +205,9 @@ extern const char* adb_device_banner;
 #define CHUNK_SIZE (64 * 1024)
 
 #if !ADB_HOST
+#ifdef LEGACY_ADB_INTERFACE
+#define USB_ADB_PATH     "/dev/android_adb"
+#endif
 #define USB_FFS_ADB_PATH "/dev/usb-ffs/adb/"
 #define USB_FFS_ADB_EP(x) USB_FFS_ADB_PATH #x
 
diff --git a/adb/daemon/main.cpp b/adb/daemon/main.cpp
index 37bc0c75b..2bf30f34b 100644
--- a/adb/daemon/main.cpp
+++ b/adb/daemon/main.cpp
@@ -203,7 +203,11 @@ int adbd_main(int server_port) {
     drop_privileges(server_port);
 
     bool is_usb = false;
+#ifdef LEGACY_ADB_INTERFACE
+    if (access(USB_ADB_PATH, F_OK) == 0) {
+#else
     if (access(USB_FFS_ADB_EP0, F_OK) == 0) {
+#endif
         // Listen on USB.
         usb_init();
         is_usb = true;
diff --git a/adb/daemon/usb.cpp b/adb/daemon/usb.cpp
index c724b1102..d3e3475ef 100644
--- a/adb/daemon/usb.cpp
+++ b/adb/daemon/usb.cpp
@@ -58,6 +58,10 @@ using namespace std::chrono_literals;
 #define cpu_to_le16(x) htole16(x)
 #define cpu_to_le32(x) htole32(x)
 
+#ifndef LEGACY_ADB_INTERFACE
+static constexpr size_t ENDPOINT_ALLOC_RETRIES = 10;
+#endif
+
 static int dummy_fd = -1;
 
 struct func_desc {
@@ -97,6 +101,138 @@ struct desc_v2 {
     struct usb_ext_compat_desc os_desc;
 } __attribute__((packed));
 
+#ifdef LEGACY_ADB_INTERFACE
+static void usb_adb_open_thread(void* x) {
+    struct usb_handle *usb = (struct usb_handle *)x;
+    int fd;
+
+    adb_thread_setname("usb open");
+
+    while (true) {
+        // wait until the USB device needs opening
+        std::unique_lock<std::mutex> lock(usb->lock);
+        while (!usb->open_new_connection) {
+            usb->notify.wait(lock);
+        }
+        usb->open_new_connection = false;
+        lock.unlock();
+
+        D("[ usb_thread - opening device ]");
+        do {
+            /* XXX use inotify? */
+            fd = unix_open("/dev/android_adb", O_RDWR);
+            if (fd < 0) {
+                // to support older kernels
+                fd = unix_open("/dev/android", O_RDWR);
+            }
+            if (fd < 0) {
+                std::this_thread::sleep_for(1s);
+            }
+        } while (fd < 0);
+        D("[ opening device succeeded ]");
+
+        close_on_exec(fd);
+        usb->fd = fd;
+
+        D("[ usb_thread - registering device ]");
+        register_usb_transport(usb, 0, 0, 1);
+    }
+
+    // never gets here
+    abort();
+}
+
+static int usb_adb_write(usb_handle *h, const void *data, int len)
+{
+    int n;
+
+    D("about to write (fd=%d, len=%d)", h->fd, len);
+    n = unix_write(h->fd, data, len);
+    if(n != len) {
+        D("ERROR: fd = %d, n = %d, errno = %d (%s)",
+            h->fd, n, errno, strerror(errno));
+        return -1;
+    }
+    if (h->kicked) {
+        D("usb_adb_write finished due to kicked");
+        return -1;
+    }
+    D("[ done fd=%d ]", h->fd);
+    return 0;
+}
+
+static int usb_adb_read(usb_handle *h, void *data, int len)
+{
+    D("about to read (fd=%d, len=%d)", h->fd, len);
+    while (len > 0) {
+        // The kernel implementation of adb_read in f_adb.c doesn't support
+        // reads larger then 4096 bytes. Read the data in 4096 byte chunks to
+        // avoid the issue. (The ffs implementation doesn't have this limit.)
+        int bytes_to_read = len < 4096 ? len : 4096;
+        int n = unix_read(h->fd, data, bytes_to_read);
+        if (n != bytes_to_read) {
+            D("ERROR: fd = %d, n = %d, errno = %d (%s)",
+                h->fd, n, errno, strerror(errno));
+            return -1;
+        }
+        if (h->kicked) {
+            D("usb_adb_read finished due to kicked");
+            return -1;
+        }
+        len -= n;
+        data = ((char*)data) + n;
+    }
+    D("[ done fd=%d ]", h->fd);
+    return 0;
+}
+
+static void usb_adb_kick(usb_handle *h) {
+    D("usb_kick");
+    // Other threads may be calling usb_adb_read/usb_adb_write at the same time.
+    // If we close h->fd, the file descriptor will be reused to open other files,
+    // and the read/write thread may operate on the wrong file. So instead
+    // we set the kicked flag and reopen h->fd to a dummy file here. After read/write
+    // threads finish, we close h->fd in usb_adb_close().
+    h->kicked = true;
+    TEMP_FAILURE_RETRY(dup2(dummy_fd, h->fd));
+}
+
+static void usb_adb_close(usb_handle *h) {
+    h->kicked = false;
+    adb_close(h->fd);
+    // Notify usb_adb_open_thread to open a new connection.
+    h->lock.lock();
+    h->open_new_connection = true;
+    h->lock.unlock();
+    h->notify.notify_one();
+}
+
+static void usb_adb_init()
+{
+    usb_handle* h = new usb_handle();
+
+    h->write = usb_adb_write;
+    h->read = usb_adb_read;
+    h->kick = usb_adb_kick;
+    h->close = usb_adb_close;
+
+    // Open the file /dev/android_adb_enable to trigger
+    // the enabling of the adb USB function in the kernel.
+    // We never touch this file again - just leave it open
+    // indefinitely so the kernel will know when we are running
+    // and when we are not.
+    int fd = unix_open("/dev/android_adb_enable", O_RDWR);
+    if (fd < 0) {
+       D("failed to open /dev/android_adb_enable");
+    } else {
+        close_on_exec(fd);
+    }
+
+    D("[ usb_init - starting thread ]");
+    std::thread(usb_adb_open_thread, h).detach();
+}
+#else
+
 static struct func_desc fs_descriptors = {
     .intf = {
         .bLength = sizeof(fs_descriptors.intf),
@@ -527,11 +663,16 @@ static void usb_ffs_init() {
     D("[ usb_init - starting thread ]");
     std::thread(usb_ffs_open_thread, h).detach();
 }
+#endif
 
 void usb_init() {
     dummy_fd = adb_open("/dev/null", O_WRONLY);
     CHECK_NE(dummy_fd, -1);
+#ifdef LEGACY_ADB_INTERFACE
+    usb_adb_init();
+#else
     usb_ffs_init();
+#endif
 }
 
 int usb_write(usb_handle* h, const void* data, int len) {
diff --git a/adb/daemon/usb.h b/adb/daemon/usb.h
index 15a7f6539..a5904faae 100644
--- a/adb/daemon/usb.h
+++ b/adb/daemon/usb.h
@@ -45,6 +45,11 @@ struct usb_handle {
     void (*kick)(usb_handle* h);
     void (*close)(usb_handle* h);
 
+#ifdef LEGACY_ADB_INTERFACE
+    // Legacy f_adb
+    int fd = -1;
+#endif
+
     // FunctionFS
     int control = -1;
     int bulk_out = -1; /* "out" from the host's perspective => source for adbd */
diff --git a/rootdir/ueventd.rc b/rootdir/ueventd.rc
index b03d83bf1..12511be26 100644
--- a/rootdir/ueventd.rc
+++ b/rootdir/ueventd.rc
@@ -68,6 +68,8 @@ subsystem sound
 # these should not be world writable
 /dev/diag                 0660   radio      radio
 /dev/diag_arm9            0660   radio      radio
+/dev/android_adb          0660   adb        adb
+/dev/android_adb_enable   0660   adb        adb
 /dev/ttyMSM0              0600   bluetooth  bluetooth
 /dev/uhid                 0660   uhid       uhid
 /dev/uinput               0660   system     bluetooth
-- 
2.17.0

