From 4025a72e229c635c63047309f3ef232305dc0251 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sun, 9 Sep 2018 22:09:49 +0300
Subject: [PATCH 19/30] Revert "STE Flattenable fix"

This reverts commit 3452e1fdfab303ba366e46fb274eebfe575da79d.

Change-Id: I9a8ba741ddf42c65325f786624a15d45c431a534
---
 libutils/Android.bp                  |  5 ++---
 libutils/Flattenable.cpp             | 24 ------------------------
 libutils/include/utils/Flattenable.h | 32 --------------------------------
 3 files changed, 2 insertions(+), 59 deletions(-)
 delete mode 100644 libutils/Flattenable.cpp

diff --git a/libutils/Android.bp b/libutils/Android.bp
index 91eedf7db..a4fc4b4ce 100644
--- a/libutils/Android.bp
+++ b/libutils/Android.bp
@@ -55,7 +55,6 @@ cc_defaults {
     cflags: [
         "-Wall",
         "-Werror",
-        "-DSTE_HARDWARE",
     ],
     include_dirs: ["external/safe-iop/include"],
     header_libs: [
@@ -84,6 +83,7 @@ cc_defaults {
                 "libdl",
                 "libvndksupport",
             ],
+
             sanitize: {
                 misc_undefined: ["integer"],
             },
@@ -112,7 +112,7 @@ cc_defaults {
                 "-Wno-unused-private-field",
             ],
 
-            enabled: false,
+            enabled: true,
         },
     },
 }
@@ -141,7 +141,6 @@ cc_library {
         "Unicode.cpp",
         "VectorImpl.cpp",
         "misc.cpp",
-        "Flattenable.cpp",
     ],
 
     target: {
diff --git a/libutils/Flattenable.cpp b/libutils/Flattenable.cpp
deleted file mode 100644
index 1f2ffaa28..000000000
--- a/libutils/Flattenable.cpp
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * Copyright (C) 2006 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#include <utils/Flattenable.h>
-
-namespace android {
-
-Flattenable::~Flattenable() {
-}
-
-}; // namespace android
diff --git a/libutils/include/utils/Flattenable.h b/libutils/include/utils/Flattenable.h
index 54ca29733..675e211e0 100644
--- a/libutils/include/utils/Flattenable.h
+++ b/libutils/include/utils/Flattenable.h
@@ -17,12 +17,6 @@
 #ifndef ANDROID_UTILS_FLATTENABLE_H
 #define ANDROID_UTILS_FLATTENABLE_H
 
-#pragma GCC diagnostic ignored "-Wdeprecated"
-#pragma GCC diagnostic ignored "-Wold-style-cast"
-#pragma GCC diagnostic ignored "-Wunused-parameter"
-#pragma GCC diagnostic ignored "-Winconsistent-missing-destructor-override"
-#pragma GCC diagnostic ignored "-Wweak-vtables"
-#pragma GCC diagnostic ignored "-Wcast-qual"
 
 #include <stdint.h>
 #include <string.h>
@@ -69,10 +63,8 @@ public:
     // write a POD structure
     template<typename T>
     static void write(void*& buffer, size_t& size, const T& value) {
-/*
         static_assert(std::is_trivially_copyable<T>::value,
                       "Cannot flatten a non-trivially-copyable type");
-*/
         memcpy(buffer, &value, sizeof(T));
         advance(buffer, size, sizeof(T));
     }
@@ -80,10 +72,8 @@ public:
     // read a POD structure
     template<typename T>
     static void read(void const*& buffer, size_t& size, T& value) {
-/*
         static_assert(std::is_trivially_copyable<T>::value,
                       "Cannot unflatten a non-trivially-copyable type");
-*/
         memcpy(&value, buffer, sizeof(T));
         advance(buffer, size, sizeof(T));
     }
@@ -96,35 +86,21 @@ public:
  * Flattenable objects must implement this protocol.
  */
 
-#ifndef STE_HARDWARE
 template <typename T>
-#endif
 class Flattenable {
 public:
     // size in bytes of the flattened object
-#ifdef STE_HARDWARE
-    virtual size_t getFlattenedSize() const = 0;
-#else
     inline size_t getFlattenedSize() const;
-#endif
 
     // number of file descriptors to flatten
-#ifdef STE_HARDWARE
-    virtual size_t getFdCount() const = 0;
-#else
     inline size_t getFdCount() const;
-#endif
 
     // flattens the object into buffer.
     // size should be at least of getFlattenedSize()
     // file descriptors are written in the fds[] array but ownership is
     // not transfered (ie: they must be dupped by the caller of
     // flatten() if needed).
-#ifdef STE_HARDWARE
-    virtual status_t flatten(void*& buffer, size_t& size, int*& fds, size_t& count) const = 0;
-#else
     inline status_t flatten(void*& buffer, size_t& size, int*& fds, size_t& count) const;
-#endif
 
     // unflattens the object from buffer.
     // size should be equal to the value of getFlattenedSize() when the
@@ -133,13 +109,6 @@ public:
     // don't need to be dupped(). ie: the caller of unflatten doesn't
     // keep ownership. If a fd is not retained by unflatten() it must be
     // explicitly closed.
-#ifdef STE_HARDWARE
-    virtual status_t unflatten(void const*& buffer, size_t& size, int const*& fds, size_t& count) = 0;
-
-protected:
-    virtual ~Flattenable() = 0;
-};
-#else
     inline status_t unflatten(void const*& buffer, size_t& size, int const*& fds, size_t& count);
 };
 
@@ -161,7 +130,6 @@ inline status_t Flattenable<T>::unflatten(
         void const*& buffer, size_t& size, int const*& fds, size_t& count) {
     return static_cast<T*>(this)->T::unflatten(buffer, size, fds, count);
 }
-#endif
 
 /*
  * LightFlattenable is a protocol allowing object to serialize themselves out
-- 
2.11.0

