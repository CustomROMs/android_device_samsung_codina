From 3b49c210dc8c6c25ae9f0748e80bbf96549db8bd Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 8 Sep 2018 19:02:23 +0300
Subject: [PATCH 09/26] audiopolicy: fixes for P

Change-Id: I08242be30c7ad714af6304fc2f23ae8a42c97fbe
---
 .../service/AudioPolicyInterfaceImpl.cpp           | 31 +++++++---------------
 .../service/AudioPolicyInterfaceImplLegacy.cpp     | 31 ++++++++++++++++------
 2 files changed, 33 insertions(+), 29 deletions(-)

diff --git a/services/audiopolicy/service/AudioPolicyInterfaceImpl.cpp b/services/audiopolicy/service/AudioPolicyInterfaceImpl.cpp
index 7337f0412..d47cebe7b 100644
--- a/services/audiopolicy/service/AudioPolicyInterfaceImpl.cpp
+++ b/services/audiopolicy/service/AudioPolicyInterfaceImpl.cpp
@@ -605,38 +605,27 @@ status_t AudioPolicyService::stopInput(audio_port_handle_t portId)
     return mAudioPolicyManager->stopInput(client->input, client->session);
 }
 
-void AudioPolicyService::releaseInput(audio_port_handle_t portId)
+void AudioPolicyService::releaseInput(audio_io_handle_t input,
+                                      audio_session_t session)
 {
-    if (mAudioPolicyManager == NULL) {
+    if (mpAudioPolicy == NULL) {
         return;
     }
+
     sp<AudioPolicyEffects>audioPolicyEffects;
-    sp<AudioRecordClient> client;
     {
         Mutex::Autolock _l(mLock);
+        mpAudioPolicy->release_input(mpAudioPolicy, input);
         audioPolicyEffects = mAudioPolicyEffects;
-        ssize_t index = mAudioRecordClients.indexOfKey(portId);
-        if (index < 0) {
-            return;
-        }
-        client = mAudioRecordClients.valueAt(index);
-        mAudioRecordClients.removeItem(portId);
-    }
-    if (client == 0) {
-        return;
     }
+
     if (audioPolicyEffects != 0) {
-        // release audio processors from the input
-        status_t status = audioPolicyEffects->releaseInputEffects(client->input, client->session);
-        if(status != NO_ERROR) {
-            ALOGW("Failed to release effects on input %d", client->input);
+       // release audio processors from the input
+        status_t status = audioPolicyEffects->releaseInputEffects(input, session);
+        if (status != NO_ERROR) {
+           ALOGW("Failed to release effects on input %d", input);
         }
     }
-    {
-        Mutex::Autolock _l(mLock);
-        AutoCallerClear acc;
-        mAudioPolicyManager->releaseInput(client->input, client->session);
-    }
 }
 
 status_t AudioPolicyService::initStreamVolume(audio_stream_type_t stream,
diff --git a/services/audiopolicy/service/AudioPolicyInterfaceImplLegacy.cpp b/services/audiopolicy/service/AudioPolicyInterfaceImplLegacy.cpp
index f8576d1b3..5e72bf7dd 100644
--- a/services/audiopolicy/service/AudioPolicyInterfaceImplLegacy.cpp
+++ b/services/audiopolicy/service/AudioPolicyInterfaceImplLegacy.cpp
@@ -258,6 +258,7 @@ status_t AudioPolicyService::getInputForAttr(const audio_attributes_t *attr,
                                              audio_session_t session,
                                              pid_t pid __unused,
                                              uid_t uid __unused,
+                                             const String16& opPackageName __unused,
                                              const audio_config_base_t *config,
                                              audio_input_flags_t flags,
                                              audio_port_handle_t *selectedDeviceId,
@@ -310,8 +311,7 @@ status_t AudioPolicyService::getInputForAttr(const audio_attributes_t *attr,
     return NO_ERROR;
 }
 
-status_t AudioPolicyService::startInput(audio_io_handle_t input,
-                                        audio_session_t session __unused)
+status_t AudioPolicyService::startInput(audio_port_handle_t input, bool *silenced __unused)
 {
     if (mpAudioPolicy == NULL) {
         return NO_INIT;
@@ -321,8 +321,7 @@ status_t AudioPolicyService::startInput(audio_io_handle_t input,
     return mpAudioPolicy->start_input(mpAudioPolicy, input);
 }
 
-status_t AudioPolicyService::stopInput(audio_io_handle_t input,
-                                       audio_session_t session __unused)
+status_t AudioPolicyService::stopInput(audio_port_handle_t input)
 {
     if (mpAudioPolicy == NULL) {
         return NO_INIT;
@@ -332,8 +331,8 @@ status_t AudioPolicyService::stopInput(audio_io_handle_t input,
     return mpAudioPolicy->stop_input(mpAudioPolicy, input);
 }
 
-void AudioPolicyService::releaseInput(audio_io_handle_t input,
-                                      audio_session_t session)
+void AudioPolicyService::releaseInput(audio_io_handle_t input/*,
+                                      audio_session_t session*/)
 {
     if (mpAudioPolicy == NULL) {
         return;
@@ -345,13 +344,15 @@ void AudioPolicyService::releaseInput(audio_io_handle_t input,
         mpAudioPolicy->release_input(mpAudioPolicy, input);
         audioPolicyEffects = mAudioPolicyEffects;
     }
+#if 0
     if (audioPolicyEffects != 0) {
         // release audio processors from the input
         status_t status = audioPolicyEffects->releaseInputEffects(input, session);
-        if(status != NO_ERROR) {
-            ALOGW("Failed to release effects on input %d", input);
+        if (status != NO_ERROR) {
+           ALOGW("Failed to release effects on input %d", input);
         }
     }
+#endif
 }
 
 status_t AudioPolicyService::initStreamVolume(audio_stream_type_t stream,
@@ -603,6 +604,7 @@ status_t AudioPolicyService::getOutputForAttr(const audio_attributes_t *attr,
                                               audio_io_handle_t *output,
                                               audio_session_t session __unused,
                                               audio_stream_type_t *stream,
+                                              pid_t pid __unused,
                                               uid_t uid __unused,
                                               const audio_config_t *config,
                                               audio_output_flags_t flags,
@@ -678,4 +680,17 @@ status_t AudioPolicyService::listAudioSessions(audio_stream_type_t streams,
 }
 #endif
 
+status_t AudioPolicyService::setSurroundFormatEnabled(audio_format_t audioFormat __unused, bool enabled __unused)
+{
+    return INVALID_OPERATION;
+}
+
+status_t AudioPolicyService::getSurroundFormats(unsigned int *numSurroundFormats __unused,
+                                        audio_format_t *surroundFormats __unused,
+                                        bool *surroundFormatsEnabled __unused,
+                                        bool reported __unused)
+{
+    return INVALID_OPERATION;
+}
+
 }; // namespace android
-- 
2.11.0

