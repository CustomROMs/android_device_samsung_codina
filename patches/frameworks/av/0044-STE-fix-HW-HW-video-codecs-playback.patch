From 00a1f8a0eb94a3ca1a6268cd30bb0e1d2c0dde9a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 20 Aug 2018 22:57:43 +0300
Subject: [PATCH 44/67] STE: fix HW / HW+ video codecs playback

Change-Id: Ib333ea88c6bcc8e75c00a4aa8af37ddc9c8e5747
---
 media/libstagefright/omx/OMXNodeInstance.cpp | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index 92397b440..8a698e3aa 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -373,7 +373,7 @@ OMXNodeInstance::OMXNodeInstance(
     mSecureBufferType[0] = kSecureBufferTypeUnknown;
     mSecureBufferType[1] = kSecureBufferTypeUnknown;
     mIsSecure = AString(name).endsWith(".secure");
-    mLegacyAdaptiveExperiment = ADebug::isExperimentEnabled("legacy-adaptive");
+    mLegacyAdaptiveExperiment = false; //ADebug::isExperimentEnabled("legacy-adaptive");
 }
 
 OMXNodeInstance::~OMXNodeInstance() {
@@ -704,7 +704,7 @@ status_t OMXNodeInstance::setPortMode(OMX_U32 portIndex, IOMX::PortMode mode) {
             }
         }
         (void)enableNativeBuffers_l(portIndex, OMX_FALSE /*graphic*/, OMX_FALSE);
-        err = storeMetaDataInBuffers_l(portIndex, OMX_TRUE, NULL);
+        err = storeMetaDataInBuffers_l(portIndex, OMX_FALSE, NULL);
         break;
     }
 
@@ -754,7 +754,8 @@ status_t OMXNodeInstance::setPortMode(OMX_U32 portIndex, IOMX::PortMode mode) {
             CLOG_INTERNAL(setPortMode, "Legacy adaptive experiment: "
                     "unable to enable metadata mode on output");
 
-            mLegacyAdaptiveExperiment = false;
+            ALOGE("//mLegacyAdaptiveExperiment = false;");
+            //mLegacyAdaptiveExperiment = false;
         }
 
         // Disable secure buffer and enable graphic buffer
@@ -1059,6 +1060,7 @@ status_t OMXNodeInstance::useBuffer(
         return BAD_VALUE;
     }
 
+    ALOGD("%s: omxBuffer.mBufferType = %d", __func__, omxBuffer.mBufferType);
     switch (omxBuffer.mBufferType) {
         case OMXBuffer::kBufferTypePreset: {
             if (mPortMode[portIndex] != IOMX::kPortModeDynamicANWBuffer
@@ -1077,6 +1079,7 @@ status_t OMXNodeInstance::useBuffer(
         }
 
         case OMXBuffer::kBufferTypeANWBuffer: {
+            mMetadataType[portIndex] = kMetadataBufferTypeInvalid;
             if (mPortMode[portIndex] != IOMX::kPortModePresetANWBuffer) {
                 break;
             }
-- 
2.11.0

