From fd3978719b83cef63d0aa6085ec98e3439b34c89 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Thu, 13 Sep 2018 23:34:34 +0300
Subject: [PATCH 20/49] libgui fixes

Change-Id: I649905562ad19e40ca418336ead572c8c643a102
---
 libs/gui/GLConsumer.cpp                               | 6 +++---
 libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp | 8 ++++----
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/libs/gui/GLConsumer.cpp b/libs/gui/GLConsumer.cpp
index 60388713b..922bf70b9 100644
--- a/libs/gui/GLConsumer.cpp
+++ b/libs/gui/GLConsumer.cpp
@@ -368,7 +368,7 @@ sp<GraphicBuffer> GLConsumer::getDebugTexImageBuffer() {
         // continues to use it.
         sp<GraphicBuffer> buffer = new GraphicBuffer(
                 kDebugData.width, kDebugData.height, PIXEL_FORMAT_RGBA_8888,
-                GraphicBuffer::USAGE_SW_WRITE_RARELY,
+                static_cast<uint64_t>(GraphicBuffer::USAGE_SW_WRITE_RARELY),
                 "[GLConsumer debug texture]");
         uint32_t* bits;
         buffer->lock(GraphicBuffer::USAGE_SW_WRITE_RARELY, reinterpret_cast<void**>(&bits));
@@ -1268,9 +1268,9 @@ status_t GLConsumer::EglImage::createIfNeeded(EGLDisplay eglDisplay,
         mEglDisplay = EGL_NO_DISPLAY;
         mCropRect.makeInvalid();
         const sp<GraphicBuffer>& buffer = mGraphicBuffer;
-        ALOGE("Failed to create image. size=%ux%u st=%u usage=%#" PRIx64 " fmt=%d",
+        ALOGE("Failed to create image. size=%ux%u st=%u fmt=%d",
             buffer->getWidth(), buffer->getHeight(), buffer->getStride(),
-            buffer->getUsage(), buffer->getPixelFormat());
+            buffer->getPixelFormat());
         return UNKNOWN_ERROR;
     }
 
diff --git a/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp b/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp
index 3b89291dc..0509dbd58 100644
--- a/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp
+++ b/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp
@@ -993,7 +993,7 @@ status_t H2BGraphicBufferProducer::setAsyncMode(bool async) {
 // FIXME: usage bits truncated -- needs a 64-bits usage version
 status_t H2BGraphicBufferProducer::dequeueBuffer(int* slot, sp<Fence>* fence, uint32_t w,
                                                  uint32_t h, ::android::PixelFormat format,
-                                                 uint64_t usage, uint64_t* outBufferAge,
+                                                 uint32_t usage, uint64_t* outBufferAge,
                                                  FrameEventHistoryDelta* outTimestamps) {
     *fence = new Fence();
     status_t fnStatus;
@@ -1153,7 +1153,7 @@ status_t H2BGraphicBufferProducer::setSidebandStream(
 
 // FIXME: usage bits truncated -- needs a 64-bits usage version
 void H2BGraphicBufferProducer::allocateBuffers(uint32_t width, uint32_t height,
-        ::android::PixelFormat format, uint64_t usage) {
+        ::android::PixelFormat format, uint32_t usage) {
     mBase->allocateBuffers(
             width, height, static_cast<PixelFormat>(format), uint32_t(usage));
 }
@@ -1234,14 +1234,14 @@ status_t H2BGraphicBufferProducer::getUniqueId(uint64_t* outId) const {
     return transStatus == NO_ERROR ? fnStatus : transStatus;
 }
 
-status_t H2BGraphicBufferProducer::getConsumerUsage(uint64_t* outUsage) const {
+status_t H2BGraphicBufferProducer::getConsumerUsage(uint32_t* outUsage) const {
     ALOGW("getConsumerUsage is not fully supported");
     int result;
     status_t transStatus = toStatusT(mBase->query(
             NATIVE_WINDOW_CONSUMER_USAGE_BITS,
             [&result, outUsage] (int32_t tResult, int32_t tValue) {
                 result = static_cast<int>(tResult);
-                *outUsage = static_cast<uint64_t>(tValue);
+                *outUsage = static_cast<uint32_t>(tValue);
             }));
     return transStatus == NO_ERROR ? result : static_cast<int>(transStatus);
 }
-- 
2.11.0

