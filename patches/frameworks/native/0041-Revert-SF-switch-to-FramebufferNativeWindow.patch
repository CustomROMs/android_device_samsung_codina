From c65f3a3d561c16f68bb93bfda2648338ede49e85 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Wed, 19 Sep 2018 01:16:44 +0300
Subject: [PATCH 41/42] Revert "SF: switch to FramebufferNativeWindow"

This reverts commit 27cbd96e97644053065c7cd86bea7ed3969e5169.

Change-Id: Icc1c5397ee76b0b39a0629667754f06af31a1788
---
 services/surfaceflinger/DisplayDevice.cpp  | 13 ++-----------
 services/surfaceflinger/SurfaceFlinger.cpp | 16 ++++------------
 2 files changed, 6 insertions(+), 23 deletions(-)

diff --git a/services/surfaceflinger/DisplayDevice.cpp b/services/surfaceflinger/DisplayDevice.cpp
index a66b2eb0a..db095a51d 100644
--- a/services/surfaceflinger/DisplayDevice.cpp
+++ b/services/surfaceflinger/DisplayDevice.cpp
@@ -34,9 +34,6 @@
 #include <ui/DebugUtils.h>
 #include <ui/DisplayInfo.h>
 #include <ui/PixelFormat.h>
-#ifdef STE_HARDWARE
-#include <ui/FramebufferNativeWindow.h>
-#endif
 
 #include <gui/Surface.h>
 
@@ -297,7 +294,6 @@ DisplayDevice::DisplayDevice(
     }
     mHdrCapabilities = HdrCapabilities(types, maxLuminance, maxAverageLuminance, minLuminance);
 
-
     // initialize the display orientation transform.
     setProjection(DisplayState::eOrientationDefault, mViewport, mFrame);
 }
@@ -483,7 +479,7 @@ android_color_transform_t DisplayDevice::getColorTransform() const {
 
 void DisplayDevice::setCompositionDataSpace(ui::Dataspace dataspace) {
     mCompositionDataSpace = dataspace;
-    ANativeWindow* const window = new FramebufferNativeWindow();
+    ANativeWindow* const window = mNativeWindow.get();
     native_window_set_buffers_data_space(window, static_cast<android_dataspace>(dataspace));
 }
 
@@ -550,12 +546,7 @@ void DisplayDevice::setDisplaySize(const int newWidth, const int newHeight) {
 
     mDisplaySurface->resizeBuffers(newWidth, newHeight);
 
-#ifdef STE_HARDWARE
-    ANativeWindow* const window = new FramebufferNativeWindow();
-#else
-    mNativeWindow = new Surface(producer, false);
     ANativeWindow* const window = mNativeWindow.get();
-#endif
     mSurface->setNativeWindow(window);
     mDisplayWidth = mSurface->queryWidth();
     mDisplayHeight = mSurface->queryHeight();
@@ -668,7 +659,7 @@ uint32_t DisplayDevice::getPrimaryDisplayOrientationTransform() {
 
 void DisplayDevice::dump(String8& result) const {
     const Transform& tr(mGlobalTransform);
-    ANativeWindow* const window = new FramebufferNativeWindow();
+    ANativeWindow* const window = mNativeWindow.get();
     result.appendFormat("+ DisplayDevice: %s\n", mDisplayName.string());
     result.appendFormat("   type=%x, hwcId=%d, layerStack=%u, (%4dx%4d), ANativeWindow=%p "
                         "(%d:%d:%d:%d), orient=%2d (type=%08x), "
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 0268e6362..87baf8c8a 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -48,11 +48,6 @@
 #include <gui/Surface.h>
 
 #include <ui/GraphicBufferAllocator.h>
-
-#ifdef STE_HARDWARE
-#include <ui/FramebufferNativeWindow.h>
-#endif
-
 #include <ui/PixelFormat.h>
 #include <ui/UiConfig.h>
 
@@ -2295,9 +2290,8 @@ sp<DisplayDevice> SurfaceFlinger::setupNewDisplayDeviceInternal(
     HdrCapabilities hdrCapabilities;
     getHwComposer().getHdrCapabilities(hwcId, &hdrCapabilities);
 
-    //auto nativeWindowSurface = mCreateNativeWindowSurface(producer);
-    //auto nativeWindow = nativeWindowSurface->getNativeWindow();
-    ANativeWindow* const nativeWindow = new FramebufferNativeWindow();
+    auto nativeWindowSurface = mCreateNativeWindowSurface(producer);
+    auto nativeWindow = nativeWindowSurface->getNativeWindow();
 
     /*
      * Create our display's surface
@@ -2305,7 +2299,7 @@ sp<DisplayDevice> SurfaceFlinger::setupNewDisplayDeviceInternal(
     std::unique_ptr<RE::Surface> renderSurface = getRenderEngine().createSurface();
     renderSurface->setCritical(state.type == DisplayDevice::DISPLAY_PRIMARY);
     renderSurface->setAsync(state.type >= DisplayDevice::DISPLAY_VIRTUAL);
-    renderSurface->setNativeWindow(nativeWindow);
+    renderSurface->setNativeWindow(nativeWindow.get());
     const int displayWidth = renderSurface->queryWidth();
     const int displayHeight = renderSurface->queryHeight();
 
@@ -2317,7 +2311,7 @@ sp<DisplayDevice> SurfaceFlinger::setupNewDisplayDeviceInternal(
     //   window's swap interval in eglMakeCurrent, so they'll override the
     //   interval we set here.
     if (state.type >= DisplayDevice::DISPLAY_VIRTUAL) {
-        nativeWindow->setSwapInterval(nativeWindow, 0);
+        nativeWindow->setSwapInterval(nativeWindow.get(), 0);
     }
 
     // virtual displays are always considered enabled
@@ -2331,11 +2325,9 @@ sp<DisplayDevice> SurfaceFlinger::setupNewDisplayDeviceInternal(
                               getHwComposer().getSupportedPerFrameMetadata(hwcId),
                               hwcColorModes, initialPowerMode);
 
-#ifndef STE_HARDWARE
     if (maxFrameBufferAcquiredBuffers >= 3) {
         nativeWindowSurface->preallocateBuffers();
     }
-#endif
 
     ColorMode defaultColorMode = ColorMode::NATIVE;
     Dataspace defaultDataSpace = Dataspace::UNKNOWN;
-- 
2.11.0

