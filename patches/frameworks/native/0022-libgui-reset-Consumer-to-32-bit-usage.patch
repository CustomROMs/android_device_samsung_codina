From fd91dcd7bee8c43c53c9287ad93ed0dad42dc23a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Mon, 20 Aug 2018 22:57:43 +0300
Subject: [PATCH 22/42] libgui: reset Consumer to 32-bit usage

Change-Id: Ia6bc172b1e98cfa426eb137a5743359cc8eea5a5
---
 libs/gui/BufferItemConsumer.cpp                    |  6 ++--
 libs/gui/BufferQueueProducer.cpp                   |  9 -----
 libs/gui/GLConsumer.cpp                            |  2 +-
 libs/gui/IGraphicBufferProducer.cpp                | 40 +---------------------
 libs/gui/Surface.cpp                               | 13 -------
 .../bufferqueue/1.0/H2BGraphicBufferProducer.cpp   |  2 --
 libs/gui/include/gui/BufferItemConsumer.h          |  2 +-
 libs/gui/include/gui/BufferQueueProducer.h         |  3 --
 libs/gui/include/gui/GLConsumer.h                  |  4 +--
 libs/gui/include/gui/IGraphicBufferProducer.h      |  2 +-
 libs/gui/include/gui/Surface.h                     |  2 --
 .../gui/bufferqueue/1.0/H2BGraphicBufferProducer.h |  1 -
 libs/nativewindow/include/system/window.h          | 14 +++-----
 .../DisplayHardware/VirtualDisplaySurface.cpp      |  4 ---
 .../DisplayHardware/VirtualDisplaySurface.h        |  1 -
 services/surfaceflinger/MonitoredProducer.cpp      |  4 ---
 services/surfaceflinger/MonitoredProducer.h        |  1 -
 17 files changed, 12 insertions(+), 98 deletions(-)

diff --git a/libs/gui/BufferItemConsumer.cpp b/libs/gui/BufferItemConsumer.cpp
index b2d0fea32..94da8bec8 100644
--- a/libs/gui/BufferItemConsumer.cpp
+++ b/libs/gui/BufferItemConsumer.cpp
@@ -19,8 +19,6 @@
 //#define ATRACE_TAG ATRACE_TAG_GRAPHICS
 #include <utils/Log.h>
 
-#include <inttypes.h>
-
 #include <gui/BufferItem.h>
 #include <gui/BufferItemConsumer.h>
 
@@ -33,13 +31,13 @@
 namespace android {
 
 BufferItemConsumer::BufferItemConsumer(
-        const sp<IGraphicBufferConsumer>& consumer, uint64_t consumerUsage,
+        const sp<IGraphicBufferConsumer>& consumer, uint32_t consumerUsage,
         int bufferCount, bool controlledByApp) :
     ConsumerBase(consumer, controlledByApp)
 {
     status_t err = mConsumer->setConsumerUsageBits(consumerUsage);
     LOG_ALWAYS_FATAL_IF(err != OK,
-            "Failed to set consumer usage bits to %#" PRIx64, consumerUsage);
+            "Failed to set consumer usage bits to %#x", consumerUsage);
     if (bufferCount != DEFAULT_MAX_BUFFERS) {
         err = mConsumer->setMaxAcquiredBufferCount(bufferCount);
         LOG_ALWAYS_FATAL_IF(err != OK,
diff --git a/libs/gui/BufferQueueProducer.cpp b/libs/gui/BufferQueueProducer.cpp
index c8021e4d5..0d716b1a9 100644
--- a/libs/gui/BufferQueueProducer.cpp
+++ b/libs/gui/BufferQueueProducer.cpp
@@ -1105,7 +1105,6 @@ int BufferQueueProducer::query(int what, int *outValue) {
             value = (mCore->mQueue.size() > 1);
             break;
         case NATIVE_WINDOW_CONSUMER_USAGE_BITS:
-            // deprecated; higher 32 bits are truncated
             value = static_cast<int32_t>(mCore->mConsumerUsageBits);
             break;
         case NATIVE_WINDOW_DEFAULT_DATASPACE:
@@ -1556,12 +1555,4 @@ status_t BufferQueueProducer::getUniqueId(uint64_t* outId) const {
     return NO_ERROR;
 }
 
-status_t BufferQueueProducer::getConsumerUsage(uint64_t* outUsage) const {
-    BQ_LOGV("getConsumerUsage");
-
-    Mutex::Autolock lock(mCore->mMutex);
-    *outUsage = mCore->mConsumerUsageBits;
-    return NO_ERROR;
-}
-
 } // namespace android
diff --git a/libs/gui/GLConsumer.cpp b/libs/gui/GLConsumer.cpp
index 922bf70b9..403d82c03 100644
--- a/libs/gui/GLConsumer.cpp
+++ b/libs/gui/GLConsumer.cpp
@@ -1155,7 +1155,7 @@ void GLConsumer::abandonLocked() {
     ConsumerBase::abandonLocked();
 }
 
-status_t GLConsumer::setConsumerUsageBits(uint64_t usage) {
+status_t GLConsumer::setConsumerUsageBits(uint32_t usage) {
     return ConsumerBase::setConsumerUsageBits(usage | DEFAULT_USAGE_FLAGS);
 }
 
diff --git a/libs/gui/IGraphicBufferProducer.cpp b/libs/gui/IGraphicBufferProducer.cpp
index 0749fde1a..b508e7af8 100644
--- a/libs/gui/IGraphicBufferProducer.cpp
+++ b/libs/gui/IGraphicBufferProducer.cpp
@@ -65,8 +65,7 @@ enum {
     SET_DEQUEUE_TIMEOUT,
     GET_LAST_QUEUED_BUFFER,
     GET_FRAME_TIMESTAMPS,
-    GET_UNIQUE_ID,
-    GET_CONSUMER_USAGE,
+    GET_UNIQUE_ID
 };
 
 class BpGraphicBufferProducer : public BpInterface<IGraphicBufferProducer>
@@ -508,25 +507,6 @@ public:
         }
         return actualResult;
     }
-
-    virtual status_t getConsumerUsage(uint64_t* outUsage) const {
-        Parcel data, reply;
-        data.writeInterfaceToken(IGraphicBufferProducer::getInterfaceDescriptor());
-        status_t result = remote()->transact(GET_CONSUMER_USAGE, data, &reply);
-        if (result != NO_ERROR) {
-            ALOGE("getConsumerUsage failed to transact: %d", result);
-        }
-        status_t actualResult = NO_ERROR;
-        result = reply.readInt32(&actualResult);
-        if (result != NO_ERROR) {
-            return result;
-        }
-        result = reply.readUint64(outUsage);
-        if (result != NO_ERROR) {
-            return result;
-        }
-        return actualResult;
-    }
 };
 
 // Out-of-line virtual method definition to trigger vtable emission in this
@@ -645,10 +625,6 @@ public:
     status_t getUniqueId(uint64_t* outId) const override {
         return mBase->getUniqueId(outId);
     }
-
-    status_t getConsumerUsage(uint64_t* outUsage) const override {
-        return mBase->getConsumerUsage(outUsage);
-    }
 };
 
 IMPLEMENT_HYBRID_META_INTERFACE(GraphicBufferProducer, HGraphicBufferProducer,
@@ -989,20 +965,6 @@ status_t BnGraphicBufferProducer::onTransact(
             }
             return NO_ERROR;
         }
-        case GET_CONSUMER_USAGE: {
-            CHECK_INTERFACE(IGraphicBufferProducer, data, reply);
-            uint64_t outUsage = 0;
-            status_t actualResult = getConsumerUsage(&outUsage);
-            status_t result = reply->writeInt32(actualResult);
-            if (result != NO_ERROR) {
-                return result;
-            }
-            result = reply->writeUint64(outUsage);
-            if (result != NO_ERROR) {
-                return result;
-            }
-            return NO_ERROR;
-        }
     }
     return BBinder::onTransact(code, data, reply, flags);
 }
diff --git a/libs/gui/Surface.cpp b/libs/gui/Surface.cpp
index 339bd0fa4..ab04b4805 100644
--- a/libs/gui/Surface.cpp
+++ b/libs/gui/Surface.cpp
@@ -994,9 +994,6 @@ int Surface::perform(int operation, va_list args)
     case NATIVE_WINDOW_SET_USAGE64:
         res = dispatchSetUsage64(args);
         break;
-    case NATIVE_WINDOW_GET_CONSUMER_USAGE64:
-        res = dispatchGetConsumerUsage64(args);
-        break;
     default:
         res = NAME_NOT_FOUND;
         break;
@@ -1186,11 +1183,6 @@ int Surface::dispatchGetHdrSupport(va_list args) {
     return getHdrSupport(outSupport);
 }
 
-int Surface::dispatchGetConsumerUsage64(va_list args) {
-    uint64_t* usage = va_arg(args, uint64_t*);
-    return getConsumerUsage(usage);
-}
-
 int Surface::connect(int api) {
     static sp<IProducerListener> listener = new DummyProducerListener();
     return connect(api, listener);
@@ -1790,11 +1782,6 @@ status_t Surface::getUniqueId(uint64_t* outId) const {
     return mGraphicBufferProducer->getUniqueId(outId);
 }
 
-int Surface::getConsumerUsage(uint64_t* outUsage) const {
-    Mutex::Autolock lock(mMutex);
-    return mGraphicBufferProducer->getConsumerUsage(outUsage);
-}
-
 nsecs_t Surface::getLastDequeueStartTime() const {
     Mutex::Autolock lock(mMutex);
     return mLastDequeueStartTime;
diff --git a/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp b/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp
index 0509dbd58..b62325540 100644
--- a/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp
+++ b/libs/gui/bufferqueue/1.0/H2BGraphicBufferProducer.cpp
@@ -21,8 +21,6 @@
 #include <gui/bufferqueue/1.0/H2BGraphicBufferProducer.h>
 #include <gui/bufferqueue/1.0/B2HProducerListener.h>
 
-#include <system/window.h>
-
 namespace android {
 namespace hardware {
 namespace graphics {
diff --git a/libs/gui/include/gui/BufferItemConsumer.h b/libs/gui/include/gui/BufferItemConsumer.h
index a905610ee..8d9568449 100644
--- a/libs/gui/include/gui/BufferItemConsumer.h
+++ b/libs/gui/include/gui/BufferItemConsumer.h
@@ -52,7 +52,7 @@ class BufferItemConsumer: public ConsumerBase
     // controlledByApp tells whether this consumer is controlled by the
     // application.
     BufferItemConsumer(const sp<IGraphicBufferConsumer>& consumer,
-            uint64_t consumerUsage, int bufferCount = DEFAULT_MAX_BUFFERS,
+            uint32_t consumerUsage, int bufferCount = DEFAULT_MAX_BUFFERS,
             bool controlledByApp = false);
 
     ~BufferItemConsumer() override;
diff --git a/libs/gui/include/gui/BufferQueueProducer.h b/libs/gui/include/gui/BufferQueueProducer.h
index 5c7ffb416..d6f215e2c 100644
--- a/libs/gui/include/gui/BufferQueueProducer.h
+++ b/libs/gui/include/gui/BufferQueueProducer.h
@@ -183,9 +183,6 @@ public:
     // See IGraphicBufferProducer::getUniqueId
     virtual status_t getUniqueId(uint64_t* outId) const override;
 
-    // See IGraphicBufferProducer::getConsumerUsage
-    virtual status_t getConsumerUsage(uint64_t* outUsage) const override;
-
 private:
     // This is required by the IBinder::DeathRecipient interface
     virtual void binderDied(const wp<IBinder>& who);
diff --git a/libs/gui/include/gui/GLConsumer.h b/libs/gui/include/gui/GLConsumer.h
index 2346d6f8a..eac435d74 100644
--- a/libs/gui/include/gui/GLConsumer.h
+++ b/libs/gui/include/gui/GLConsumer.h
@@ -213,7 +213,7 @@ public:
 
     // setConsumerUsageBits overrides the ConsumerBase method to OR
     // DEFAULT_USAGE_FLAGS to usage.
-    status_t setConsumerUsageBits(uint64_t usage);
+    status_t setConsumerUsageBits(uint32_t usage);
 
     status_t convert(sp<GraphicBuffer> &srcBuf, sp<GraphicBuffer> &dstBuf);
 
@@ -397,7 +397,7 @@ private:
     // BufferQueue instance; these will be OR:d with any additional flags passed
     // from the GLConsumer user. In particular, GLConsumer will always
     // consume buffers as hardware textures.
-    static const uint64_t DEFAULT_USAGE_FLAGS = GraphicBuffer::USAGE_HW_TEXTURE;
+    static const uint32_t DEFAULT_USAGE_FLAGS = GraphicBuffer::USAGE_HW_TEXTURE;
 
     // mCurrentTextureImage is the EglImage/buffer of the current texture. It's
     // possible that this buffer is not associated with any buffer slot, so we
diff --git a/libs/gui/include/gui/IGraphicBufferProducer.h b/libs/gui/include/gui/IGraphicBufferProducer.h
index 26def0873..688ae5423 100644
--- a/libs/gui/include/gui/IGraphicBufferProducer.h
+++ b/libs/gui/include/gui/IGraphicBufferProducer.h
@@ -619,7 +619,7 @@ public:
     // full 64-bit usage flags, rather than the truncated 32-bit usage flags
     // returned by querying the now deprecated
     // NATIVE_WINDOW_CONSUMER_USAGE_BITS attribute.
-    virtual status_t getConsumerUsage(uint64_t* outUsage) const = 0;
+    virtual status_t getConsumerUsage(uint32_t* outUsage) const = 0;
 
     // Static method exports any IGraphicBufferProducer object to a parcel. It
     // handles null producer as well.
diff --git a/libs/gui/include/gui/Surface.h b/libs/gui/include/gui/Surface.h
index 9aeafae19..6c46ca03c 100644
--- a/libs/gui/include/gui/Surface.h
+++ b/libs/gui/include/gui/Surface.h
@@ -161,7 +161,6 @@ public:
     status_t getHdrSupport(bool* supported);
 
     status_t getUniqueId(uint64_t* outId) const;
-    status_t getConsumerUsage(uint64_t* outUsage) const;
 
     // Returns the CLOCK_MONOTONIC start time of the last dequeueBuffer call
     nsecs_t getLastDequeueStartTime() const;
@@ -228,7 +227,6 @@ private:
     int dispatchGetFrameTimestamps(va_list args);
     int dispatchGetWideColorSupport(va_list args);
     int dispatchGetHdrSupport(va_list args);
-    int dispatchGetConsumerUsage64(va_list args);
 
 protected:
     virtual int dequeueBuffer(ANativeWindowBuffer** buffer, int* fenceFd);
diff --git a/libs/gui/include/gui/bufferqueue/1.0/H2BGraphicBufferProducer.h b/libs/gui/include/gui/bufferqueue/1.0/H2BGraphicBufferProducer.h
index 74850b487..c1c3ae730 100644
--- a/libs/gui/include/gui/bufferqueue/1.0/H2BGraphicBufferProducer.h
+++ b/libs/gui/include/gui/bufferqueue/1.0/H2BGraphicBufferProducer.h
@@ -94,7 +94,6 @@ struct H2BGraphicBufferProducer : public ::android::H2BConverter<
           sp<Fence>* outFence, float outTransformMatrix[16]) override;
     void getFrameTimestamps(FrameEventHistoryDelta* outDelta) override;
     status_t getUniqueId(uint64_t* outId) const override;
-    status_t getConsumerUsage(uint64_t* outUsage) const override;
 };
 
 }  // namespace utils
diff --git a/libs/nativewindow/include/system/window.h b/libs/nativewindow/include/system/window.h
index 55d3aac7a..c080038fa 100644
--- a/libs/nativewindow/include/system/window.h
+++ b/libs/nativewindow/include/system/window.h
@@ -115,7 +115,7 @@ enum {
      * The consumer gralloc usage bits currently set by the consumer.
      * The values are defined in hardware/libhardware/include/gralloc.h.
      */
-    NATIVE_WINDOW_CONSUMER_USAGE_BITS = 10, /* deprecated */
+    NATIVE_WINDOW_CONSUMER_USAGE_BITS = 10,
 
     /**
      * Transformation that will by applied to buffers by the hwcomposer.
@@ -224,7 +224,6 @@ enum {
     NATIVE_WINDOW_GET_WIDE_COLOR_SUPPORT        = 28,
     NATIVE_WINDOW_GET_HDR_SUPPORT               = 29,
     NATIVE_WINDOW_SET_USAGE64                   = 30,
-    NATIVE_WINDOW_GET_CONSUMER_USAGE64          = 31,
 // clang-format on
 };
 
@@ -901,18 +900,13 @@ static inline int native_window_get_frame_timestamps(
 
 static inline int native_window_get_wide_color_support(
     struct ANativeWindow* window, bool* outSupport) {
-    return window->perform(window, NATIVE_WINDOW_GET_WIDE_COLOR_SUPPORT,
-            outSupport);
+  return window->perform(window, NATIVE_WINDOW_GET_WIDE_COLOR_SUPPORT,
+                         outSupport);
 }
 
 static inline int native_window_get_hdr_support(struct ANativeWindow* window,
                                                 bool* outSupport) {
-    return window->perform(window, NATIVE_WINDOW_GET_HDR_SUPPORT, outSupport);
-}
-
-static inline int native_window_get_consumer_usage(struct ANativeWindow* window,
-                                                   uint64_t* outUsage) {
-    return window->perform(window, NATIVE_WINDOW_GET_CONSUMER_USAGE64, outUsage);
+  return window->perform(window, NATIVE_WINDOW_GET_HDR_SUPPORT, outSupport);
 }
 
 __END_DECLS
diff --git a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
index 5bbfcf612..876ee0b70 100644
--- a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
+++ b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
@@ -597,10 +597,6 @@ status_t VirtualDisplaySurface::getUniqueId(uint64_t* /*outId*/) const {
     return INVALID_OPERATION;
 }
 
-status_t VirtualDisplaySurface::getConsumerUsage(uint64_t* outUsage) const {
-    return mSource[SOURCE_SINK]->getConsumerUsage(outUsage);
-}
-
 void VirtualDisplaySurface::updateQueueBufferOutput(
         QueueBufferOutput&& qbo) {
     mQueueBufferOutput = std::move(qbo);
diff --git a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h
index 5c8aceae9..16305e89f 100644
--- a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h
+++ b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.h
@@ -127,7 +127,6 @@ private:
     virtual status_t getLastQueuedBuffer(sp<GraphicBuffer>* outBuffer,
             sp<Fence>* outFence, float outTransformMatrix[16]) override;
     virtual status_t getUniqueId(uint64_t* outId) const override;
-    virtual status_t getConsumerUsage(uint64_t* outUsage) const override;
 
     //
     // Utility methods
diff --git a/services/surfaceflinger/MonitoredProducer.cpp b/services/surfaceflinger/MonitoredProducer.cpp
index 389fbd23e..d0f448213 100644
--- a/services/surfaceflinger/MonitoredProducer.cpp
+++ b/services/surfaceflinger/MonitoredProducer.cpp
@@ -145,10 +145,6 @@ status_t MonitoredProducer::getUniqueId(uint64_t* outId) const {
     return mProducer->getUniqueId(outId);
 }
 
-status_t MonitoredProducer::getConsumerUsage(uint64_t* outUsage) const {
-    return mProducer->getConsumerUsage(outUsage);
-}
-
 IBinder* MonitoredProducer::onAsBinder() {
     return this;
 }
diff --git a/services/surfaceflinger/MonitoredProducer.h b/services/surfaceflinger/MonitoredProducer.h
index 1246d142f..ff7f0f0e8 100644
--- a/services/surfaceflinger/MonitoredProducer.h
+++ b/services/surfaceflinger/MonitoredProducer.h
@@ -68,7 +68,6 @@ public:
     virtual status_t setAutoRefresh(bool autoRefresh) override;
     virtual void getFrameTimestamps(FrameEventHistoryDelta *outDelta) override;
     virtual status_t getUniqueId(uint64_t* outId) const override;
-    virtual status_t getConsumerUsage(uint64_t* outUsage) const override;
 
     // The Layer which created this producer, and on which queued Buffer's will be displayed.
     sp<Layer> getLayer() const;
-- 
2.11.0

