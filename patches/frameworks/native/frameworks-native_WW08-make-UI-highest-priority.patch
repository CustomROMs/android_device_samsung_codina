native: make UI highest priority

diff --git a/services/surfaceflinger/DispSync.cpp b/services/surfaceflinger/DispSync.cpp
index 44122d0..064e119 100644
--- a/services/surfaceflinger/DispSync.cpp
+++ b/services/surfaceflinger/DispSync.cpp
@@ -294,7 +294,7 @@ DispSync::DispSync() :
         mRefreshSkipCount(0),
         mThread(new DispSyncThread()) {
 
-    mThread->run("DispSync", PRIORITY_URGENT_DISPLAY + PRIORITY_MORE_FAVORABLE);
+    mThread->run("DispSync", PRIORITY_REALTIME);
 
     reset();
     beginResync();
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
index 45122d0..064e119 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
@@ -1338,7 +1338,7 @@ void HWComposer::VSyncThread::setEnabled(bool enabled) {
 }
 
 void HWComposer::VSyncThread::onFirstRef() {
-    run("VSyncThread", PRIORITY_URGENT_DISPLAY + PRIORITY_MORE_FAVORABLE);
+    run("VSyncThread", PRIORITY_REALTIME);
 }
 
 bool HWComposer::VSyncThread::threadLoop() {
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer_v0.cpp b/services/surfaceflinger/DisplayHardware/HWComposer_v0.cpp
index 45122d0..064e109 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer_v0.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer_v0.cpp
@@ -1242,7 +1242,7 @@ void HWComposer::VSyncThread::setEnabled(bool enabled) {
 }
 
 void HWComposer::VSyncThread::onFirstRef() {
-    run("VSyncThread", PRIORITY_URGENT_DISPLAY + PRIORITY_MORE_FAVORABLE);
+    run("VSyncThread", PRIORITY_REALTIME);
 }
 
 bool HWComposer::VSyncThread::threadLoop() {
diff --git a/services/surfaceflinger/EventThread.cpp b/services/surfaceflinger/EventThread.cpp
index 46122d0..064e119 100644
--- a/services/surfaceflinger/EventThread.cpp
+++ b/services/surfaceflinger/EventThread.cpp
@@ -90,7 +90,7 @@ void EventThread::sendVsyncHintOnLocked() {
 }
 
 void EventThread::onFirstRef() {
-    run("EventThread", PRIORITY_URGENT_DISPLAY + PRIORITY_MORE_FAVORABLE);
+    run("EventThread", PRIORITY_REALTIME);
 }
 
 sp<EventThread::Connection> EventThread::createEventConnection() const {
